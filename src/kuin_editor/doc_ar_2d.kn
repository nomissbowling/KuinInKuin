var resCacheDraw: drawex@ResCacheDraw

+func updateMainSrcDir(dir: []char)
	if(@resCacheDraw =& null)
		do @resCacheDraw :: #drawex@ResCacheDraw
	end if
	do @resCacheDraw.setBaseDir(dir)
end func

+class DocAr2d(\doc_ar@DocAr)
	*func ctor()
		do super(me)
		do me.root :: #@ObjLayer
		var width: int
		var height: int
		do me.root.getDefaultSize(&width, &height)
		do me.root.init("layer", true, 0, 0, width, height, null)
		if(@resCacheDraw =& null)
			do @resCacheDraw :: #drawex@ResCacheDraw
		end if
	end func

	+*func fix()
		var lines: list<[]char> :: #list<[]char>
		do lines.add("+var resCacheDraw: drawex@ResCacheDraw")
		do lines.add("+var \{me.root.name}: list<drawex@Obj>")

		do me.nodes.head()
		while(!me.nodes.term())
			var node: @ObjAr2d :: me.nodes.get() $ @ObjAr2d
			do lines.add("+var \{node.name}: \{node.type()}")
			do me.nodes.next()
		end while

		do lines.add("")
		do lines.add("+func init()")
		do lines.add("\tif(@\{me.root.name} <>& null)")
		do lines.add("\t\tdo @fin()")
		do lines.add("\tend if")
		do lines.add("\tdo @resCacheDraw :: #drawex@ResCacheDraw")
		do lines.add("\tdo @\{me.root.name} :: #list<drawex@Obj>")

		do me.nodes.head()
		while(!me.nodes.term())
			var node: @ObjAr2d :: me.nodes.get() $ @ObjAr2d
			do lines.add("\tdo @\{node.name} :: #\{node.type()}")
			do node.getSrcInit(1, lines)
			do lines.add("\tdo @\{me.root.name}.add(@\{node.name})")
			do me.nodes.next()
		end while

		do lines.add("end func")
		do lines.add("")
		do lines.add("+func fin()")
		do lines.add("\tdo @\{me.root.name} :: null")

		do me.nodes.head()
		while(!me.nodes.term())
			var node: @ObjAr2d :: me.nodes.get() $ @ObjAr2d
			do lines.add("\tdo @\{node.name} :: null")
			do me.nodes.next()
		end while

		do lines.add("end func")
		do lines.add("")
		do lines.add("+func draw()")
		do lines.add("\tdo drawex@draw(@\{me.root.name})")
		do lines.add("end func")
		do me.src :: lines.toArray()
	end func

	*func makeObj(name: []char): \doc_ar@Obj
		switch(name)
		case "Layer"
			ret #@ObjLayer
		case "Rect"
			ret #@ObjRect
		case "RoundRect"
			ret #@ObjRoundRect
		case "Circle"
			ret #@ObjCircle
		case "Text"
			ret #@ObjText
		case "Img"
			ret #@ObjImg
		case "Particle"
			ret #@ObjParticle
		end switch
		ret null
	end func

	*func updateLt()
		do \form@listLt.add("Rect", 6)
		do \form@listLt.add("RoundRect", 10)
		do \form@listLt.add("Circle", 7)
		do \form@listLt.add("Text", 8)
		do \form@listLt.add("Img", 9)
		do \form@listLt.add("Particle", 11)
	end func
end class

class ObjAr2d(\doc_ar@Obj)
	+func type(): []char
	end func

	+func getSrcInit(indent: int, lines: list<[]char>)
	end func
end class

class ObjLayer(@ObjAr2d)
	+*func draw(x: float, y: float, width: float, height: float, zoom: float)
		do draw@rect(x * zoom, y * zoom, width * zoom, height * zoom, 0xFF000000)
	end func

	+*func getMinMax(minWidth: &int, minHeight: &int, maxWidth: &int, maxHeight: &int)
		do minWidth :: 50
		do minHeight :: 50
		do maxWidth :: lib@intMax
		do maxHeight :: lib@intMax
	end func

	+*func getDefaultSize(width: &int, height: &int)
		do width :: 640
		do height :: 480
	end func

	+*func kind(): []char
		ret "Layer"
	end func

	+*func init(name: []char, visible: bool, x: int, y: int, width: int, height: int, props: dict<[]char, []char>)
		do super(me, name, visible, x, y, width, height, props)
		if(props <>& null)
			ret
		end if
		do me.reloadRes()
	end func

	+*func propsNames(): [][]char
		ret #[0][]char
	end func

	+*func propsTypes(): []\doc_ar@PropType
		ret #[0]\doc_ar@PropType
	end func

	+*func propsTypeDatas(): [][][]char
		ret #[0][][]char
	end func
end class

class ObjRect(@ObjAr2d)
	+*func draw(x: float, y: float, width: float, height: float, zoom: float)
		var colorFill: int :: \doc_ar@getPropAsInt(me.props, "colorFill")
		if(colorFill <> 0)
			do draw2d@rect(x * zoom, y * zoom, width * zoom, height * zoom, colorFill)
		end if
		var colorStroke: int :: \doc_ar@getPropAsInt(me.props, "colorStroke")
		if(colorStroke <> 0)
			do draw2d@rectLine(x * zoom, y * zoom, width * zoom, height * zoom, \doc_ar@getPropAsFloat(me.props, "strokeWidth") * zoom, colorStroke)
		end if
	end func

	+*func getMinMax(minWidth: &int, minHeight: &int, maxWidth: &int, maxHeight: &int)
		do minWidth :: 1
		do minHeight :: 1
		do maxWidth :: lib@intMax
		do maxHeight :: lib@intMax
	end func

	+*func getDefaultSize(width: &int, height: &int)
		do width :: 100
		do height :: 100
	end func

	+*func kind(): []char
		ret "Rect"
	end func

	+*func icon(): int
		ret 5
	end func

	+*func init(name: []char, visible: bool, x: int, y: int, width: int, height: int, props: dict<[]char, []char>)
		do super(me, name, visible, x, y, width, height, props)
		if(props <>& null)
			ret
		end if
		do me.props.add("colorFill", "0xFFFFFFFF")
		do me.props.add("colorStroke", "0x00000000")
		do me.props.add("strokeWidth", "1.0")
		do me.reloadRes()
	end func

	+*func propsNames(): [][]char
		ret ["colorFill", "colorStroke", "strokeWidth"]
	end func

	+*func propsTypes(): []\doc_ar@PropType
		ret [%color $ \doc_ar@PropType, %color, %float_]
	end func

	+*func propsTypeDatas(): [][][]char
		ret #[3][][]char
	end func

	+*func type(): []char
		ret "drawex@ObjRect"
	end func

	+*func getSrcInit(indent: int, lines: list<[]char>)
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.init(\{me.x} $ float, \{me.y} $ float, \{me.width} $ float, \{me.height} $ float, \{me.visible})")
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.colorFill :: \{me.props.get("colorFill", &)}")
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.colorStroke :: \{me.props.get("colorStroke", &)}")
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.strokeWidth :: \{me.props.get("strokeWidth", &)}")
	end func
end class

class ObjCircle(@ObjAr2d)
	+*func draw(x: float, y: float, width: float, height: float, zoom: float)
		var halfWidth: float :: width / 2.0
		var halfHeight: float :: height / 2.0
		var colorFill: int :: \doc_ar@getPropAsInt(me.props, "colorFill")
		if(colorFill <> 0)
			do draw2d@circle((x + halfWidth) * zoom, (y + halfHeight) * zoom, halfWidth * zoom, halfHeight * zoom, colorFill)
		end if
		var colorStroke: int :: \doc_ar@getPropAsInt(me.props, "colorStroke")
		if(colorStroke <> 0)
			do draw2d@circleLine((x + halfWidth) * zoom, (y + halfHeight) * zoom, halfWidth * zoom, halfHeight * zoom, \doc_ar@getPropAsFloat(me.props, "strokeWidth") * zoom, colorStroke)
		end if
	end func

	+*func getMinMax(minWidth: &int, minHeight: &int, maxWidth: &int, maxHeight: &int)
		do minWidth :: 1
		do minHeight :: 1
		do maxWidth :: lib@intMax
		do maxHeight :: lib@intMax
	end func

	+*func getDefaultSize(width: &int, height: &int)
		do width :: 100
		do height :: 100
	end func

	+*func kind(): []char
		ret "Circle"
	end func

	+*func icon(): int
		ret 6
	end func

	+*func init(name: []char, visible: bool, x: int, y: int, width: int, height: int, props: dict<[]char, []char>)
		do super(me, name, visible, x, y, width, height, props)
		if(props <>& null)
			ret
		end if
		do me.props.add("colorFill", "0xFFFFFFFF")
		do me.props.add("colorStroke", "0x00000000")
		do me.props.add("strokeWidth", "1.0")
		do me.reloadRes()
	end func

	+*func propsNames(): [][]char
		ret ["colorFill", "colorStroke", "strokeWidth"]
	end func

	+*func propsTypes(): []\doc_ar@PropType
		ret [%color $ \doc_ar@PropType, %color, %float_]
	end func

	+*func propsTypeDatas(): [][][]char
		ret #[3][][]char
	end func

	+*func type(): []char
		ret "drawex@ObjCircle"
	end func

	+*func getSrcInit(indent: int, lines: list<[]char>)
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.init(\{me.x} $ float, \{me.y} $ float, \{me.width} $ float, \{me.height} $ float, \{me.visible})")
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.colorFill :: \{me.props.get("colorFill", &)}")
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.colorStroke :: \{me.props.get("colorStroke", &)}")
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.strokeWidth :: \{me.props.get("strokeWidth", &)}")
	end func
end class

class ObjText(@ObjAr2d)
	+*func draw(x: float, y: float, width: float, height: float, zoom: float)
		var color: int :: \doc_ar@getPropAsInt(me.props, "color")
		if(color = 0 | me.font =& null)
			ret
		end if

		var alignHorizontal: draw@AlignHorizontal
		var alignVertical: draw@AlignVertical
		var x2: float
		var y2: float
		switch(me.props.get("alignHorizontal", &))
		case "%center"
			do alignHorizontal :: %center
			do x2 :: x + width / 2.0
		case "%right"
			do alignHorizontal :: %right
			do x2 :: x + width
		default
			do alignHorizontal :: %left
			do x2 :: x
		end switch
		switch(me.props.get("alignVertical", &))
		case "%center"
			do alignVertical :: %center
			do y2 :: y + height / 2.0
		case "%bottom"
			do alignVertical :: %bottom
			do y2 :: y + height
		default
			do alignVertical :: %top
			do y2 :: y
		end switch

		do me.font.align(alignHorizontal, alignVertical)
		do me.font.drawScale(x2 * zoom, y2 * zoom, zoom, zoom, me.props.get("text", &), color)
		do me.font.align(%left, %top)
	end func

	+*func getMinMax(minWidth: &int, minHeight: &int, maxWidth: &int, maxHeight: &int)
		do minWidth :: 1
		do minHeight :: 1
		do maxWidth :: lib@intMax
		do maxHeight :: lib@intMax
	end func

	+*func getDefaultSize(width: &int, height: &int)
		do width :: 100
		do height :: 100
	end func

	+*func kind(): []char
		ret "Text"
	end func

	+*func icon(): int
		ret 7
	end func

	+*func init(name: []char, visible: bool, x: int, y: int, width: int, height: int, props: dict<[]char, []char>)
		do super(me, name, visible, x, y, width, height, props)
		if(props <>& null)
			ret
		end if
		do me.props.add("text", name)
		do me.props.add("color", "0xFFFFFFFF")
		do me.props.add("alignHorizontal", "%left")
		do me.props.add("alignVertical", "%top")
		do me.props.add("fontName", "")
		do me.props.add("fontSize", "30")
		do me.props.add("bold", "false")
		do me.props.add("italic", "false")
		do me.props.add("proportional", "true")
		do me.props.add("advance", "0.0")
		do me.reloadRes()
	end func

	+*func fin()
		if(me.font <>& null)
			do @resCacheDraw.del(me.font)
			do me.font :: null
		end if
	end func

	+*func propsNames(): [][]char
		ret ["text", "color", "alignHorizontal", "alignVertical", "fontName", "fontSize", "bold", "italic", "proportional", "advance"]
	end func

	+*func propsTypes(): []\doc_ar@PropType
		ret [%str $ \doc_ar@PropType, %color, %enum_, %enum_, %str, %int_, %bool_, %bool_, %bool_, %float_]
	end func

	+*func propsTypeDatas(): [][][]char
		ret [null, null, ["%left", "%center", "%right"], ["%top", "%center", "%bottom"], null, null, null, null, null, null]
	end func

	+*func reloadRes()
		if(me.font <>& null)
			do @resCacheDraw.del(me.font)
			do me.font :: null
		end if
		try
			do me.font :: @resCacheDraw.makeFont(me.props.get("fontName", &), me.props.get("fontSize", &).toInt(&), me.props.get("bold", &) = "true", me.props.get("italic", &) = "true", me.props.get("proportional", &) = "true", me.props.get("advance", &).toFloat(&))
		catch
			do me.font :: null
		end try
	end func

	+*func type(): []char
		ret "drawex@ObjText"
	end func

	+*func getSrcInit(indent: int, lines: list<[]char>)
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.init(\{me.x} $ float, \{me.y} $ float, \{me.width} $ float, \{me.height} $ float, \{me.visible})")
		var fontName: []char :: me.props.get("fontName", &)
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.text :: \"\{me.props.get("text", &)}\"")
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.color :: \{me.props.get("color", &)}")
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.alignHorizontal :: \{me.props.get("alignHorizontal", &)}")
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.alignVertical :: \{me.props.get("alignVertical", &)}")
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.setFont(@resCacheDraw, \"\{fontName =& "" ?("null", fontName)}\", \{me.props.get("fontSize", &)}, \{me.props.get("bold", &)}, \{me.props.get("italic", &)}, \{me.props.get("proportional", &)}, \{me.props.get("advance", &)})")
	end func

	var font: draw@Font
end class

class ObjImg(@ObjAr2d)
	+*func draw(x: float, y: float, width: float, height: float, zoom: float)
		var color: int :: \doc_ar@getPropAsInt(me.props, "color")
		if(color = 0 | me.tex =& null)
			ret
		end if

		do me.tex.drawScale(x * zoom, y * zoom, width * zoom, height * zoom, \doc_ar@getPropAsInt(me.props, "srcX") $ float, \doc_ar@getPropAsInt(me.props, "srcX") $ float, \doc_ar@getPropAsInt(me.props, "srcWidth") $ float, \doc_ar@getPropAsInt(me.props, "srcHeight") $ float, color)
	end func

	+*func getMinMax(minWidth: &int, minHeight: &int, maxWidth: &int, maxHeight: &int)
		do minWidth :: 1
		do minHeight :: 1
		do maxWidth :: lib@intMax
		do maxHeight :: lib@intMax
	end func

	+*func getDefaultSize(width: &int, height: &int)
		do width :: 100
		do height :: 100
	end func

	+*func kind(): []char
		ret "Img"
	end func

	+*func icon(): int
		ret 8
	end func

	+*func init(name: []char, visible: bool, x: int, y: int, width: int, height: int, props: dict<[]char, []char>)
		do super(me, name, visible, x, y, width, height, props)
		if(props <>& null)
			ret
		end if
		do me.props.add("texPath", "")
		do me.props.add("srcX", "0")
		do me.props.add("srcY", "0")
		do me.props.add("srcWidth", "100")
		do me.props.add("srcHeight", "100")
		do me.props.add("color", "0xFFFFFFFF")
		do me.reloadRes()
	end func

	+*func fin()
		if(me.tex <>& null)
			do @resCacheDraw.del(me.tex)
			do me.tex :: null
		end if
	end func

	+*func propsNames(): [][]char
		ret ["texPath", "srcX", "srcY", "srcWidth", "srcHeight", "color"]
	end func

	+*func propsTypes(): []\doc_ar@PropType
		ret [%str $ \doc_ar@PropType, %int_, %int_, %int_, %int_, %color]
	end func

	+*func propsTypeDatas(): [][][]char
		ret #[6][][]char
	end func

	+*func reloadRes()
		if(me.tex <>& null)
			do @resCacheDraw.del(me.tex)
			do me.tex :: null
		end if
		try
			do me.tex :: @resCacheDraw.makeTex(me.props.get("texPath", &))
		catch
			do me.tex :: null
		end try
	end func

	+*func type(): []char
		ret "drawex@ObjImg"
	end func

	+*func getSrcInit(indent: int, lines: list<[]char>)
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.init(\{me.x} $ float, \{me.y} $ float, \{me.width} $ float, \{me.height} $ float, \{me.visible})")
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.srcX :: \{me.props.get("srcX", &)} $ float")
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.srcY :: \{me.props.get("srcY", &)} $ float")
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.srcWidth :: \{me.props.get("srcWidth", &)} $ float")
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.srcHeight :: \{me.props.get("srcHeight", &)} $ float")
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.color :: \{me.props.get("color", &)}")
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.setTex(@resCacheDraw, \"\{me.props.get("texPath", &).replace("\\", "\\\\")}\")")
	end func

	var tex: draw@Tex
end class

class ObjRoundRect(@ObjAr2d)
	+*func draw(x: float, y: float, width: float, height: float, zoom: float)
		var radiusX: float :: \doc_ar@getPropAsInt(me.props, "radiusX") $ float
		var radiusY: float :: \doc_ar@getPropAsInt(me.props, "radiusY") $ float
		var colorFill: int :: \doc_ar@getPropAsInt(me.props, "colorFill")
		if(colorFill <> 0)
			do draw2d@roundRect(x * zoom, y * zoom, width * zoom, height * zoom, radiusX * zoom, radiusY * zoom, colorFill)
		end if
		var colorStroke: int :: \doc_ar@getPropAsInt(me.props, "colorStroke")
		if(colorStroke <> 0)
			do draw2d@roundRectLine(x * zoom, y * zoom, width * zoom, height * zoom, radiusX * zoom, radiusY * zoom, \doc_ar@getPropAsFloat(me.props, "strokeWidth") * zoom, colorStroke)
		end if
	end func

	+*func getMinMax(minWidth: &int, minHeight: &int, maxWidth: &int, maxHeight: &int)
		do minWidth :: 1
		do minHeight :: 1
		do maxWidth :: lib@intMax
		do maxHeight :: lib@intMax
	end func

	+*func getDefaultSize(width: &int, height: &int)
		do width :: 100
		do height :: 100
	end func

	+*func kind(): []char
		ret "RoundRect"
	end func

	+*func icon(): int
		ret 9
	end func

	+*func init(name: []char, visible: bool, x: int, y: int, width: int, height: int, props: dict<[]char, []char>)
		do super(me, name, visible, x, y, width, height, props)
		if(props <>& null)
			ret
		end if
		do me.props.add("colorFill", "0xFFFFFFFF")
		do me.props.add("colorStroke", "0x00000000")
		do me.props.add("radiusX", "20")
		do me.props.add("radiusY", "20")
		do me.props.add("strokeWidth", "1.0")
		do me.reloadRes()
	end func

	+*func propsNames(): [][]char
		ret ["colorFill", "colorStroke", "radiusX", "radiusY", "strokeWidth"]
	end func

	+*func propsTypes(): []\doc_ar@PropType
		ret [%color $ \doc_ar@PropType, %color, %int_, %int_, %float_]
	end func

	+*func propsTypeDatas(): [][][]char
		ret #[5][][]char
	end func

	+*func type(): []char
		ret "drawex@ObjRoundRect"
	end func

	+*func getSrcInit(indent: int, lines: list<[]char>)
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.init(\{me.x} $ float, \{me.y} $ float, \{me.width} $ float, \{me.height} $ float, \{me.visible})")
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.colorFill :: \{me.props.get("colorFill", &)}")
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.colorStroke :: \{me.props.get("colorStroke", &)}")
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.radiusX :: \{me.props.get("radiusX", &)} $ float")
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.radiusY :: \{me.props.get("radiusY", &)} $ float")
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.strokeWidth :: \{me.props.get("strokeWidth", &)}")
	end func
end class

class ObjParticle(@ObjAr2d)
	+*func draw(x: float, y: float, width: float, height: float, zoom: float)
		if(me.particle =& null | me.tex =& null)
			ret
		end if

		do me.particle.emit(x * zoom, y * zoom, 0.0, 0.0, 0.0, 0.0, width * zoom, 0.0, 0.0, 0.0)

		do me.particle.draw2d(me.tex)
	end func

	+*func getMinMax(minWidth: &int, minHeight: &int, maxWidth: &int, maxHeight: &int)
		do minWidth :: 50
		do minHeight :: 50
		do maxWidth :: 50
		do maxHeight :: 50
	end func

	+*func getDefaultSize(width: &int, height: &int)
		do width :: 50
		do height :: 50
	end func

	+*func kind(): []char
		ret "Particle"
	end func

	+*func icon(): int
		ret 10
	end func

	+*func init(name: []char, visible: bool, x: int, y: int, width: int, height: int, props: dict<[]char, []char>)
		do super(me, name, visible, x, y, width, height, props)
		if(props <>& null)
			ret
		end if
		do me.props.add("lifespan", "60")
		do me.props.add("friction", "0.0")
		do me.props.add("accelX", "0.0")
		do me.props.add("accelY", "0.0")
		do me.props.add("color1", "0xFFFFFFFF")
		do me.props.add("color2", "0xFFFFFFFF")
		do me.props.add("sizeAccel", "0.0")
		do me.props.add("rotAccel", "0.0")
		do me.props.add("texPath", "")
		do me.reloadRes()
	end func

	+*func fin()
		if(me.particle <>& null)
			do @resCacheDraw.del(me.particle)
			do me.particle :: null
		end if
		if(me.tex <>& null)
			do @resCacheDraw.del(me.tex)
			do me.tex :: null
		end if
	end func

	+*func propsNames(): [][]char
		ret ["lifespan", "friction", "accelX", "accelY", "color1", "color2", "sizeAccel", "rotAccel", "texPath"]
	end func

	+*func propsTypes(): []\doc_ar@PropType
		ret [%int_ $ \doc_ar@PropType, %float_, %float_, %float_, %color, %color, %float_, %float_, %str]
	end func

	+*func propsTypeDatas(): [][][]char
		ret #[9][][]char
	end func

	+*func reloadRes()
		if(me.particle <>& null)
			do @resCacheDraw.del(me.particle)
			do me.particle :: null
		end if
		if(me.tex <>& null)
			do @resCacheDraw.del(me.tex)
			do me.tex :: null
		end if
		try
			do me.particle :: @resCacheDraw.makeParticle(\doc_ar@getPropAsInt(me.props, "lifespan"), \doc_ar@getPropAsInt(me.props, "color1"), \doc_ar@getPropAsInt(me.props, "color2"), \doc_ar@getPropAsFloat(me.props, "friction"), \doc_ar@getPropAsFloat(me.props, "accelX"), \doc_ar@getPropAsFloat(me.props, "accelY"), \doc_ar@getPropAsFloat(me.props, "accelZ"), \doc_ar@getPropAsFloat(me.props, "sizeAccel"), \doc_ar@getPropAsFloat(me.props, "rotAccel"))
		catch
			do me.particle :: null
		end try
		try
			do me.tex :: @resCacheDraw.makeTex(me.props.get("texPath", &))
		catch
			do me.tex :: null
		end try
	end func

	+*func type(): []char
		ret "drawex@ObjParticle"
	end func

	+*func getSrcInit(indent: int, lines: list<[]char>)
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.init(\{me.x} $ float, \{me.y} $ float, \{me.width} $ float, \{me.height} $ float, \{me.visible})")
		var texPath: []char :: me.props.get("texPath", &)
		do texPath :: texPath = "" ?("null", "\"" ~ texPath.replace("\\", "\\\\") ~ "\"")
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.setParticle(@resCacheDraw, \{me.props.get("lifespan", &)}, \{me.props.get("color1", &)}, \{me.props.get("color2", &)}, \{me.props.get("friction", &)}, \{me.props.get("accelX", &)}, \{me.props.get("accelY", &)}, 0.0, \{me.props.get("sizeAccel", &)}, \{me.props.get("rotAccel", &)})")
		do lines.add("\t".repeat(indent) ~ "do @\{me.name}.setTex(@resCacheDraw, \{texPath})")
	end func

	var particle: draw@Particle
	var tex: draw@Tex
end class
