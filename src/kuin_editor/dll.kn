+func[d0917.knd, InitCompiler]initCompiler()
end func

+func[d0917.knd, FinCompiler]finCompiler()
end func

+func[d0917.knd, BuildMem]build(option: [][]char, funcGetSrc: func<([]char): [][]char>, funcLog: func<([][]char, int, int)>): bool
end func

+func[d0917.knd, Interpret1]interpret1(src: kuin@Class, line: int, me_: kuin@Class, replaceFunc: func<(\doc_src@DocSrc, int, []char)>, cursorX: int, cursorY: int, newCursorX: &int, oldLine: int, newLine: int)
end func

+func[d0917.knd, Interpret2]interpret2(option: [][]char, funcGetSrc: func<([]char): [][]char>, funcLog: func<([][]char, int, int)>, funcComplete: func<()>)
end func

+func[d0917.knd, Version]version(major: &int, minor: &int, micro: &int)
end func

+func[d0917.knd, ResetMemAllocator]resetMemAllocator()
end func

; TODO: +func [d0917.knd, GetHint] getHint(bufIdx: int, src: []char, row: int, keyword: []char, hintSrc: &[]char, hintRow: &int, hintCol: &int): []char
; end func

+func[d0917.knd, GetKeywords]getKeywords(src: kuin@Class, srcName: []char, x: int, y: int, callback: func<([]char)>): []char
end func

+func[d0917.knd, RunDbg]runDbg(name: []char, cmdLine: []char, idleFunc: func<()>, eventFunc: func<(int, []char): int>, breakPointsFunc: func<()>, breakFunc: func<(int, \src@Pos, []char)>, dbgFunc: func<(int, []char, []char)>): bool
end func

+func[d0917.knd, SetBreakPoints]setBreakPoints(breakPoints: []\src@Pos)
end func

+func[d0917.knd, LockThread]lockThread()
end func

+func[d0917.knd, Interpret2Running]interpret2Running(): bool
end func

+func[d0917.knd, WaitEndOfInterpret2]waitEndOfInterpret2()
end func
