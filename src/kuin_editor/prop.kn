+func save()
	var path: []char :: file@delExt(\src@mainSrcPath) ~ ".knprop"
	do file@delFile(path)
	var prop: xml@Xml :: xml@makeXmlEmpty()
	var root: xml@Node :: prop.root()
	var cfg: xml@Node :: root.addChild("configuration")
	do cfg.addChild("icon").setValue(\form@iconPath)
	do cfg.addChild("env").setValue(\form@getEnv())
	do cfg.addChild("snap").setValue((\form@snap ?(\form@snapValue, 0)).toStr())
	do cfg.addChild("zoom").setValue(\form@zoom.toStr())
	var relatedFiles: xml@Node :: cfg.addChild("related_files")
	do \form@relatedFiles.head()
	while(!\form@relatedFiles.term())
		do relatedFiles.addChild("path").setValue(\form@relatedFiles.get())
		do \form@relatedFiles.next()
	end while

	class Data()
		+var reses: xml@Node
		+var curDoc: \doc@Doc
	end class
	var data: Data :: #Data
	do data.reses :: cfg.addChild("resources")
	do data.curDoc :: \src@mainDoc()
	do \src@docs.forEach(callback, data)
	do prop.save(path, false)

	func callback(src: []char, doc: \doc@Doc, data: Data): bool
		if(doc <>& data.curDoc & src[0] = '\\')
			do data.reses.addChild("resource").setValue(src.sub(1, -1) ~ \src@getExt(doc))
		end if
		ret true
	end func
end func

+func load()
	if(\src@mainSrcDir = \common@defaultDir)
		ret
	end if
	try
		var prop: xml@Xml :: xml@makeXml(file@delExt(\src@mainSrcPath) ~  ".knprop")
		if(prop =& null)
			ret
		end if
		var root: xml@Node :: prop.root()
		var cfg: xml@Node :: root.findChild("configuration")
		try
			do \form@iconPath :: cfg.findChild("icon").getValue()
		catch
		end try
		try
			do \form@setEnvDirectly(cfg.findChild("env").getValue())
		catch
		end try
		try
			var success: bool
			var snap: int :: cfg.findChild("snap").getValue().toInt(&success)
			if(success)
				do \form@snap :: snap <> 0
				do \form@snapValue :: snap < 1 ?(5, snap)
			end if
		catch
		end try
		try
			var success: bool
			var zoom: float :: cfg.findChild("zoom").getValue().toFloat(&success)
			if(success)
				do \form@zoom :: zoom
			end if
		catch
		end try
		try
			do \form@relatedFiles :: #list<[]char>
			var relatedFiles: xml@Node :: cfg.findChild("related_files").firstChild()
			while (relatedFiles <>& null)
				do \form@relatedFiles.add(relatedFiles.getValue())
				do relatedFiles :: relatedFiles.next()
			end while
		catch
		end try
		try
			var reses: xml@Node :: cfg.findChild("resources").firstChild()
			while(reses <>& null)
				do \src@loadFileToDocs(\src@mainSrcDir ~ reses.getValue())
				do reses :: reses.next()
			end while
		catch
		end try
	catch
	end try
end func

+func changeProp()
	var doc: \doc@Doc :: \src@mainDoc()
	do doc.setChanged(true)
	do \form@updateFile()
end func
