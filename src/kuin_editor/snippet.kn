var wndSnippet: wnd@Wnd
var wndSnippetListSnippets: wnd@ListView
var wndSnippetEditName: wnd@Edit
var wndSnippetEditCode: wnd@EditMulti

var wndPlace: wnd@Wnd
var wndPlaceResult: []char
var regexVariableSearch: regex@Regex
var wndPlaceVariables: dict<[]char, wnd@Edit>
var wndPlaceSnippetCode: []char

var snippets: list<@Snippet>

class Snippet()
	+var name: []char
	+var removable: bool
	+var code: []char
end class

+func showSnippet()
	do @wndSnippet :: wnd@makeWnd(\form@wndMain, (%fix $ wnd@WndStyle).or(%noMinimize), 640, 405, \common@langEn ?("Edit Snippets", "スニペットの編集"))
	do @wndSnippetListSnippets :: wnd@makeListView(@wndSnippet, 12, 12, 250, 352, %fix, %scale, false, null, null)
	do @wndSnippetListSnippets.style(%list_)
	do @wndSnippetListSnippets.draggable(true)
	do @snippets.head()
	while(!@snippets.term())
		var snippet: @Snippet :: @snippets.get()
		if(snippet.removable)
			do @wndSnippetListSnippets.add(snippet.name, -1)
		end if
		do @snippets.next()
	end while
	do @wndSnippetListSnippets.onSel :: listSnippetsOnSel
	do @wndSnippetListSnippets.onMoveNode :: listSnippetsOnMoveNode
	var labelName: wnd@Label :: wnd@makeLabel(@wndSnippet, 268, 12, 35, 12, %fix, %fix, \common@langEn ?("Name", "名前"))
	do @wndSnippetEditName :: wnd@makeEdit(@wndSnippet, 268, 30, 360, 19, %fix, %fix)
	do @wndSnippetEditName.onFocus :: editNameOnFocus
	var labelCode: wnd@Label :: wnd@makeLabel(@wndSnippet, 268, 55, 35, 12, %fix, %fix, \common@langEn ?("Code", "コード"))
	do @wndSnippetEditCode :: wnd@makeEditMulti(@wndSnippet, 268, 73, 360, 291, %fix, %fix)
	do @wndSnippetEditCode.onFocus :: editCodeOnFocus
	var btnAdd: wnd@Btn :: wnd@makeBtn(@wndSnippet, 12, 370, 100, 23, %fix, %fix, \common@langEn ?("Add", "追加"))
	do btnAdd.onPush :: btnAddOnPush
	var btnDel: wnd@Btn :: wnd@makeBtn(@wndSnippet, 118, 370, 100, 23, %fix, %fix, \common@langEn ?("Delete", "削除"))
	do btnDel.onPush :: btnDelOnPush
	var btnOk: wnd@Btn :: wnd@makeBtn(@wndSnippet, 528, 370, 100, 23, %fix, %fix, "OK")
	do btnOk.onPush :: btnOkOnPush

	do @wndSnippet.modal()
	do @wndSnippet :: null
	do @wndSnippetListSnippets :: null
	do @wndSnippetEditName :: null
	do @wndSnippetEditCode :: null
	do @save()
	do \form@updateUi()

	func listSnippetsOnSel(wnd: wnd@WndBase)
		var snippet: @Snippet :: @findSelSnippet()
		if(snippet =& null)
			do @wndSnippetEditName.setText("")
			do @wndSnippetEditCode.setText("")
		else
			do @wndSnippetEditName.setText(snippet.name)
			do @wndSnippetEditCode.setText(snippet.code)
		end if
	end func

	func listSnippetsOnMoveNode(wnd: wnd@WndBase)
		var newSnippets: list<@Snippet> :: #list<@Snippet>
		do @snippets.head()
		while(!@snippets.term())
			var snippet: @Snippet :: @snippets.get()
			if(!snippet.removable)
				do newSnippets.add(snippet)
			end if
			do @snippets.next()
		end while
		for i(0, @wndSnippetListSnippets.len() - 1)
			var name: []char :: @wndSnippetListSnippets.getText(&, i, 0)
			do @snippets.head()
			while loop(!@snippets.term())
				var snippet: @Snippet :: @snippets.get()
				if(snippet.removable & snippet.name = name)
					do newSnippets.add(snippet)
					break loop
				end if
				do @snippets.next()
			end while
		end for
		do @snippets :: newSnippets
	end func

	func editNameOnFocus(wnd: wnd@WndBase, focused: bool)
		if(!focused)
			var snippet: @Snippet :: @findSelSnippet()
			if(snippet =& null)
				ret
			end if
			var name: []char :: @wndSnippetEditName.getText().trim()
			if(@validate(name))
				do snippet.name :: name
				do @wndSnippetListSnippets.setText(@wndSnippetListSnippets.getSel(), 0, name, -1)
			end if
			do @wndSnippetEditName.setText(snippet.name)
		end if
	end func

	func editCodeOnFocus(wnd: wnd@WndBase, focused: bool)
		if(!focused)
			var snippet: @Snippet :: @findSelSnippet()
			if(snippet =& null)
				ret
			end if
			do snippet.code :: @wndSnippetEditCode.getText()
		end if
	end func

	func btnAddOnPush(wnd: wnd@WndBase)
		var unique: int :: 1
		while(true)
			var name: []char :: "Snippet" ~ unique.toStr()
			var found: bool :: false
			do @snippets.head()
			while loop(!@snippets.term())
				var snippet: @Snippet :: @snippets.get()
				if(snippet.removable & snippet.name = name)
					do found :: true
					break loop
				end if
				do @snippets.next()
			end while
			if(!found)
				var snippet: @Snippet :: #@Snippet
				do snippet.name :: name
				do snippet.removable :: true
				do snippet.code :: ""
				do @snippets.add(snippet)
				do @wndSnippetListSnippets.add(name, -1)
				do @wndSnippetListSnippets.setSel(@wndSnippetListSnippets.len() - 1)
				ret
			end if
			do unique :+ 1
		end while
	end func

	func btnDelOnPush(wnd: wnd@WndBase)
		var sel: int :: @wndSnippetListSnippets.getSel()
		if(sel = -1)
			ret
		end if
		var name: []char :: @wndSnippetListSnippets.getText(&, sel, 0)
		if(wnd@msgBox(@wndSnippet, \common@langEn ?("Do you want to remove the snippet '\{name}'?", "スニペット「\{name}」を削除しますか？"), \common@title, %none, %yesNoCancel) <> %yes)
			ret
		end if
		do @snippets.head()
		while loop(!@snippets.term())
			var snippet: @Snippet :: @snippets.get()
			if(snippet.removable & snippet.name = name)
				do @snippets.del()
				break loop
			end if
			do @snippets.next()
		end while
		do @wndSnippetListSnippets.del(sel)
	end func

	func btnOkOnPush(wnd: wnd@WndBase)
		do @wndSnippet.close()
	end func
end func

+func showPlace(name: []char): []char
	if(^name >= 1 & name[0] = '\\')
		do name :: name.sub(1, -1)
	end if
	var snippet: @Snippet :: null
	do @snippets.head()
	while loop(!@snippets.term())
		var item: @Snippet :: @snippets.get()
		if(item.name = name)
			do snippet :: item
			break loop
		end if
		do @snippets.next()
	end while
	if(snippet =& null)
		ret null
	end if
	do @wndPlaceSnippetCode :: snippet.code

	do @wndPlace :: wnd@makeWnd(\form@wndMain, (%fix $ wnd@WndStyle).or(%noMinimize), 600, 400, \common@langEn ?("Place Snippet \"\{snippet.name}\"", "スニペット「\{snippet.name}」の配置"))
	var labelCode: wnd@Label :: wnd@makeLabel(@wndPlace, 12, 12, 276, 12, %fix, %fix, \common@langEn ?("The following code will be placed.", "以下のコードが配置されます。"))
	var editCode: wnd@EditMulti :: wnd@makeEditMulti(@wndPlace, 12, 30, 326, 329, %fix, %fix)
	do editCode.readonly(true)
	do editCode.setText(@wndPlaceSnippetCode)
	var labelDescription1: wnd@Label :: wnd@makeLabel(@wndPlace, 344, 12, 244, 12, %fix, %fix, \common@langEn ?("The parts enclosed by \"{{\" and \"}}\" are", "「{{」と「}}」で囲まれた部分は"))
	var labelDescription2: wnd@Label :: wnd@makeLabel(@wndPlace, 344, 30, 244, 12, %fix, %fix, \common@langEn ?("replaced by the following.", "以下で置換されます。"))
	var btnPlace: wnd@Btn :: wnd@makeBtn(@wndPlace, 382, 365, 100, 23, %fix, %fix, \common@langEn ?("Place", "配置"))
	do btnPlace.onPush :: btnPlaceOnPush
	var btnCancel: wnd@Btn :: wnd@makeBtn(@wndPlace, 488, 365, 100, 23, %fix, %fix, \common@langEn ?("Cancel", "キャンセル"))
	do btnCancel.onPush :: btnCancelOnPush
	do @wndPlaceResult :: null

	do @wndPlaceVariables :: #dict<[]char, wnd@Edit>
	if(@regexVariableSearch =& null)
		do @regexVariableSearch :: regex@makeRegex("\\{\\{(.+?)\\}\\}")
	end if
	var matches: [][][]char :: @regexVariableSearch.findAll(&, @wndPlaceSnippetCode)
	if(matches <>& null)
		var itemCnt: int :: 0
		for i(0, ^matches - 1)
			var variable: []char :: matches[i][1]
			if(!@wndPlaceVariables.exist(variable))
				var labelVariable: wnd@Label :: wnd@makeLabel(@wndPlace, 344, 48 + itemCnt * 25, 70, 12, %fix, %fix, variable)
				var editVariable: wnd@Edit :: wnd@makeEdit(@wndPlace, 420, 48 + itemCnt * 25, 168, 19, %fix, %fix)
				do editVariable.setText(variable)
				do @wndPlaceVariables.add(variable, editVariable)
				do itemCnt :+ 1
			end if
		end for
	end if

	do @wndPlace.modal()
	do @wndPlace :: null
	do @wndPlaceSnippetCode :: null
	do @wndPlaceVariables :: null

	ret @wndPlaceResult

	func btnPlaceOnPush(wnd: wnd@WndBase)
		var data: lib@Str :: #lib@Str
		do data.value :: @wndPlaceSnippetCode
		do @wndPlaceVariables.forEach(callback, data)
		do @wndPlaceResult :: data.value
		do @wndPlace.close()

		func callback(key: []char, value: wnd@Edit, data: lib@Str): bool
			do data.value :: data.value.replace("{{\{key}}}", value.getText().trim())
			ret true
		end func
	end func

	func btnCancelOnPush(wnd: wnd@WndBase)
		do @wndPlace.close()
	end func
end func

+func load()
	do @snippets :: #list<@Snippet>
	do loadXml(file@exeDir() ~  "sys/snippet.knd", false)
	do loadXml(file@exeDir() ~  "sys/snippet_user.knd", true)

	func loadXml(path: []char, removable: bool)
		try
			var prop: xml@Xml :: xml@makeXml(path)
			if(prop =& null)
				ret
			end if
			var root: xml@Node :: prop.root()
			var snippets: xml@Node :: root.findChild("snippets")
			var node: xml@Node :: snippets.firstChild()
			while(node <>& null)
				var item: @Snippet :: #@Snippet
				do item.name :: node.findChild("name").getValue()
				if(item.name =& null)
					do item.name :: ""
				end if
				do item.removable :: removable
				do item.code :: node.findChild("code").getValue()
				if(item.code =& null)
					do item.code :: ""
				end if
				do @snippets.add(item)
				do node :: node.next()
			end while
		catch
		end try
	end func
end func

func save()
	do saveXml(file@exeDir() ~  "sys/snippet.knd", false)
	do saveXml(file@exeDir() ~  "sys/snippet_user.knd", true)

	func saveXml(path: []char, removable: bool)
		do file@delFile(path)
		var prop: xml@Xml :: xml@makeXmlEmpty()
		var root: xml@Node :: prop.root()
		var snippets: xml@Node :: root.addChild("snippets")
		do @snippets.head()
		while(!@snippets.term())
			var snippet: @Snippet :: @snippets.get()
			if(snippet.removable = removable)
				var node: xml@Node :: snippets.addChild("snippet")
				do node.addChild("name").setValue(snippet.name)
				do node.addChild("code").setValue(snippet.code)
			end if
			do @snippets.next()
		end while
		do prop.save(path, false)
	end func
end func

+func add(code: []char)
	if(code =& null)
		ret
	end if

	var name: []char :: wndex@inputBox(\form@wndMain, \common@langEn ?("Input the snippet name.", "スニペットの名前を入力してください。"), \common@title, null, @validate)
	if(name <>& null)
		do name :: name.trim()
		if(name <> "")
			var snippet: @Snippet :: #@Snippet
			do snippet.name :: name
			do snippet.removable :: true
			do snippet.code :: code
			do @snippets.add(snippet)
			do @save()
			do \form@updateUi()
		end if
	end if
end func

+func updateList(list_: wnd@ListView)
	do @snippets.head()
	while(!@snippets.term())
		var snippet: @Snippet :: @snippets.get()
		do list_.add((snippet.removable ?("\\", "")) ~ snippet.name, -1)
		do @snippets.next()
	end while
end func

func findSelSnippet(): @Snippet
	var sel: int :: @wndSnippetListSnippets.getSel()
	if (sel = -1)
		ret null
	end if
	var name: []char :: @wndSnippetListSnippets.getText(&, sel, 0)
	do @snippets.head()
	while(!@snippets.term())
		var snippet: @Snippet :: @snippets.get()
		if(snippet.removable & snippet.name = name)
			ret snippet
		end if
		do @snippets.next()
	end while
	ret null
end func

func validate(name: []char): bool
	if(name.trim() = "")
		ret false
	end if
	do @snippets.head()
	while(!@snippets.term())
		var snippet: @Snippet :: @snippets.get()
		if(snippet.removable & snippet.name = name)
			ret false
		end if
		do @snippets.next()
	end while
	ret true
end func
