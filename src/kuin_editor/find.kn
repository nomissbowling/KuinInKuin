+var wndFind: wnd@Wnd
var wndFindTabFind: wnd@Tab
var wndFindEditPattern: wnd@Edit
var wndFindEditReplace: wnd@Edit
var wndFindRadioDoc: wnd@Radio
var wndFindRadioAll: wnd@Radio
var wndFindRadioSel: wnd@Radio
var wndFindChkDistinguishCase: wnd@Chk
var wndFindChkOnlyWord: wnd@Chk
var wndFindChkRegularExpression: wnd@Chk
var wndFindBtnPrev: wnd@Btn
var wndFindBtnNext: wnd@Btn
var wndFindBtnReplace: wnd@Btn
var wndFindBtnReplaceAll: wnd@Btn
var wndFindEditPatternLast: []char
var wndFindEditReplaceLast: []char
var wndFindRadioLast: int
var wndFindChkDistinguishCaseLast: bool
var wndFindChkOnlyWordLast: bool
var wndFindChkRegularExpressionLast: bool
var tabOrderFind: wnd@TabOrder
var wndResult: wnd@Wnd
var wndResultListItems: wnd@List
var resultPoses: list<\src@Pos>

+func init()
	do @wndFindEditPatternLast :: ""
	do @wndFindEditReplaceLast :: ""
	do @wndFindChkDistinguishCaseLast :: true
end func

+func show(replace: bool, defaultWord: []char)
	var x: int
	var y: int
	var w: int
	do \form@drawEditor.getPosScreen(&x, &y, &w, &)
	if(@wndFind =& null)
		do @wndFind :: wnd@makeWnd(\form@wndMain, %fix $ wnd@WndStyle, 380, 332, \common@langEn ?("Find and Replace", "検索と置換"))
		do @wndFind.setPos(x + w - 380 - 17, y, 380, 332)
		do @wndFind.onClose :: wndFindOnClose
		do @wndFindTabFind :: wnd@makeTab(@wndFind, 12, 12, 356, 308, %scale, %scale)
		do @wndFindTabFind.add("検索")
		do @wndFindTabFind.add("置換")
		do @wndFindTabFind.onSel :: wndFindTabFindOnSel
		do wnd@makeLabel(@wndFindTabFind, 6, 28, 324, 12, %fix, %fix, \common@langEn ?("Find what:", "検索する文字列:"))
		do @wndFindEditPattern :: wnd@makeEdit(@wndFindTabFind, 6, 46, 344, 19, %scale, %fix)
		do @wndFindEditPattern.onChange :: wndFindEditPatternOnChange
		if(defaultWord <>& null)
			do @wndFindEditPattern.setText(defaultWord)
		end if
		do wnd@makeLabel(@wndFindTabFind, 6, 71, 324, 12, %fix, %fix, \common@langEn ?("Replace with:", "置換後の文字列:"))
		do @wndFindEditReplace :: wnd@makeEdit(@wndFindTabFind, 6, 89, 344, 19, %scale, %fix)
		do @wndFindEditReplace.onChange :: wndFindEditReplaceOnChange
		var groupTarget: wnd@Group :: wnd@makeGroup(@wndFindTabFind, 6, 114, 344, 84, %scale, %fix, \common@langEn ?("Look in", "検索対象"))
		do @wndFindRadioDoc :: wnd@makeRadio(groupTarget, 6, 18, 312, 16, %fix, %fix, \common@langEn ?("Current document", "現在のドキュメント"))
		do @wndFindRadioAll :: wnd@makeRadio(groupTarget, 6, 40, 312, 16, %fix, %fix, \common@langEn ?("All documents", "すべてのドキュメント"))
		do @wndFindRadioSel :: wnd@makeRadio(groupTarget, 6, 62, 312, 16, %fix, %fix, \common@langEn ?("Selection", "選択範囲"))
		do @wndFindRadioDoc.onPush :: wndFindRadioDocAllSelOnPush
		do @wndFindRadioAll.onPush :: wndFindRadioDocAllSelOnPush
		do @wndFindRadioSel.onPush :: wndFindRadioDocAllSelOnPush
		do @wndFindChkDistinguishCase :: wnd@makeChk(@wndFindTabFind, 6, 204, 166, 16, %fix, %fix, \common@langEn ?("Match case", "大文字と小文字を区別する"))
		do @wndFindChkDistinguishCase.onPush :: wndFindChkDistinguishCaseOnPush
		do @wndFindChkOnlyWord :: wnd@makeChk(@wndFindTabFind, 6, 226, 166, 16, %fix, %fix, \common@langEn ?("Match whole word", "単語単位"))
		do @wndFindChkOnlyWord.onPush :: wndFindChkOnlyWordOnPush
		do @wndFindChkRegularExpression :: wnd@makeChk(@wndFindTabFind, 6, 248, 166, 16, %fix, %fix, \common@langEn ?("Use Regular Expressions", "正規表現を使用する"))
		do @wndFindChkRegularExpression.onPush :: wndFindChkRegularExpressionOnPush
		do @wndFindBtnPrev :: wnd@makeBtn(@wndFindTabFind, 178, 212, 75, 23, %fix, %fix, \common@langEn ?("Find Previous", "前を検索"))
		do @wndFindBtnPrev.onPush :: @wndFindBtnPrevOnPush
		do @wndFindBtnNext :: wnd@makeBtn(@wndFindTabFind, 178, 241, 75, 23, %fix, %fix, \common@langEn ?("Find Next", "次を検索"))
		do @wndFindBtnNext.onPush :: @wndFindBtnNextOnPush
		do @wndFindBtnReplace :: wnd@makeBtn(@wndFindTabFind, 259, 212, 75, 23, %fix, %fix, \common@langEn ?("Replace", "置換"))
		do @wndFindBtnReplace.onPush :: wndFindBtnReplaceOnPush
		do @wndFindBtnReplaceAll :: wnd@makeBtn(@wndFindTabFind, 259, 241, 75, 23, %fix, %fix, \common@langEn ?("Replace All", "すべて置換"))
		do @wndFindBtnReplaceAll.onPush :: wndFindBtnReplaceAllOnPush
		if(@wndFindEditPatternLast <>& null)
			do @wndFindEditPattern.setText(@wndFindEditPatternLast)
		end if
		if(@wndFindEditReplaceLast <>& null)
			do @wndFindEditReplace.setText(@wndFindEditReplaceLast)
		end if
		switch(@wndFindRadioLast)
		case 1
			do @wndFindRadioAll.setChk(true)
		case 2
			do @wndFindRadioSel.setChk(true)
		default
			do @wndFindRadioDoc.setChk(true)
		end switch
		do @wndFindChkDistinguishCase.setChk(@wndFindChkDistinguishCaseLast)
		do @wndFindChkOnlyWord.setChk(@wndFindChkOnlyWordLast)
		do @wndFindChkRegularExpression.setChk(@wndFindChkRegularExpressionLast)

		do @tabOrderFind :: wnd@makeTabOrder([@wndFindEditPattern $ wnd@WndBase, @wndFindEditReplace, @wndFindBtnPrev, @wndFindBtnNext, @wndFindBtnReplace, @wndFindBtnReplaceAll])
	else
		do @wndFind.setPos(x + w - 380 - 17, y, 380, 332)
		do @wndFind.activate()
	end if
	do @wndFindTabFind.setSel(replace ?(1, 0))
	do updateUi()
	do wndFindChkRegularExpressionOnPush(null)
	do @wndFindEditPattern.focus()
	do @wndFindEditPattern.setSel(0, -1)

	func wndFindOnClose(wnd: wnd@Wnd): bool
		do @tabOrderFind :: null

		do @wndFindEditPatternLast :: @wndFindEditPattern.getText()
		do @wndFindEditReplaceLast :: @wndFindEditReplace.getText()
		if(@wndFindRadioAll.getChk())
			do @wndFindRadioLast :: 1
		elif(@wndFindRadioSel.getChk())
			do @wndFindRadioLast :: 2
		else
			do @wndFindRadioLast :: 0
		end if
		do @wndFindChkDistinguishCaseLast :: @wndFindChkDistinguishCase.getChk()
		do @wndFindChkOnlyWordLast :: @wndFindChkOnlyWord.getChk()
		do @wndFindChkRegularExpressionLast :: @wndFindChkRegularExpression.getChk()

		do @wndFind :: null
		do @wndFindTabFind :: null
		do @wndFindEditPattern :: null
		do @wndFindEditReplace :: null
		do @wndFindRadioDoc :: null
		do @wndFindRadioAll :: null
		do @wndFindRadioSel :: null
		do @wndFindChkDistinguishCase :: null
		do @wndFindChkOnlyWord :: null
		do @wndFindChkRegularExpression :: null
		do @wndFindBtnPrev :: null
		do @wndFindBtnNext :: null
		do @wndFindBtnReplace :: null
		do @wndFindBtnReplaceAll :: null
		ret true
	end func

	func wndFindTabFindOnSel(wnd: wnd@Tab)
		do updateUi()
	end func

	func wndFindEditPatternOnChange(wnd: wnd@Edit)
		do @wndFindEditPatternLast :: @wndFindEditPattern.getText()
	end func

	func wndFindEditReplaceOnChange(wnd: wnd@Edit)
		do @wndFindEditReplaceLast :: @wndFindEditReplace.getText()
	end func

	func wndFindRadioDocAllSelOnPush(wnd: wnd@Radio)
		do updateUi()
	end func

	func wndFindChkDistinguishCaseOnPush(wnd: wnd@Chk)
		do @wndFindChkDistinguishCaseLast :: @wndFindChkDistinguishCase.getChk()
	end func

	func wndFindChkOnlyWordOnPush(wnd: wnd@Chk)
		do @wndFindChkOnlyWordLast :: @wndFindChkOnlyWord.getChk()
	end func

	func wndFindChkRegularExpressionOnPush(wnd: wnd@Chk)
		do @wndFindChkRegularExpressionLast :: @wndFindChkRegularExpression.getChk()
		do @wndFindChkDistinguishCase.setEnabled(!@wndFindChkRegularExpressionLast)
		do @wndFindChkOnlyWord.setEnabled(!@wndFindChkRegularExpressionLast)
	end func

	func wndFindBtnReplaceOnPush(wnd: wnd@Btn)
		do @replaceOne(@wndFindEditPatternLast, @wndFindEditReplaceLast, @wndFindChkDistinguishCaseLast, @wndFindChkOnlyWordLast, @wndFindChkRegularExpressionLast)
		do \form@focusDrawEditor()
	end func

	func wndFindBtnReplaceAllOnPush(wnd: wnd@Btn)
		if(@wndFindRadioDoc.getChk())
			do @replaceAll(@wndFindEditPatternLast, @wndFindEditReplaceLast, @wndFindChkDistinguishCaseLast, @wndFindChkOnlyWordLast, @wndFindChkRegularExpressionLast)
		elif(@wndFindRadioAll.getChk())
			do @replaceAllInAllDocs(@wndFindEditPatternLast, @wndFindEditReplaceLast, @wndFindChkDistinguishCaseLast, @wndFindChkOnlyWordLast, @wndFindChkRegularExpressionLast)
		else
			do @replaceSel(@wndFindEditPatternLast, @wndFindEditReplaceLast, @wndFindChkDistinguishCaseLast, @wndFindChkOnlyWordLast, @wndFindChkRegularExpressionLast)
		end if
		do \form@focusDrawEditor()
	end func

	func updateUi()
		var replace: bool :: @wndFindTabFind.getSel() = 1
		if(@wndFindRadioDoc.getChk())
			do @wndFindBtnPrev.setEnabled(true)
			do @wndFindBtnNext.setText(\common@langEn ?("Find Next", "次を検索"))
			do @wndFindBtnReplace.setEnabled(replace)
		else
			do @wndFindBtnPrev.setEnabled(false)
			do @wndFindBtnNext.setText(\common@langEn ?("Find All", "すべて検索"))
			do @wndFindBtnReplace.setEnabled(false)
		end if
		do @wndFindEditReplace.setEnabled(replace)
		do @wndFindBtnReplaceAll.setEnabled(replace)
	end func
end func

func wndFindBtnNextOnPush(wnd: wnd@Btn)
	class FindData()
		+var list_: wnd@List
		+var poses: list<\src@Pos>
		+var pattern: []char
		+var distinguishCase: bool
		+var onlyWord: bool
		+var regularExpression: bool
	end class

	if(@wndFindEditPatternLast <>& null)
		if(@wndFindRadioDoc.getChk())
			do @findNext()
		else
			if(@wndResult <>& null)
				do @wndResult.exit()
			end if
			do @wndResult :: wnd@makeWnd(\form@wndMain, (%fix $ wnd@WndStyle).or(%noMinimize), 300, 400, \common@langEn ?("Search Results of \"\{@wndFindEditPatternLast}\"", "「\{@wndFindEditPatternLast}」の検索結果"))
			do @wndResultListItems :: wnd@makeList(@wndResult, 12, 12, 276, 376, %scale, %scale)
			do @wndResultListItems.onSel :: wndResultListItemsOnSel
			do @resultPoses :: #list<\src@Pos>
			if(@wndFindRadioAll.getChk())
				var data: FindData :: #FindData
				do data.list_ :: @wndResultListItems
				do data.poses :: @resultPoses
				do data.pattern :: @wndFindEditPatternLast
				do data.distinguishCase :: @wndFindChkDistinguishCaseLast
				do data.onlyWord :: @wndFindChkOnlyWordLast
				do data.regularExpression :: @wndFindChkRegularExpressionLast
				do \src@docs.forEach(findAll, data)
			elif(\src@curDoc =$ \doc_src@DocSrc)
				do (\src@curDoc $ \doc_src@DocSrc).findSel(@wndResultListItems, @resultPoses, \src@curDocName, @wndFindEditPatternLast, @wndFindChkDistinguishCaseLast, @wndFindChkOnlyWordLast, @wndFindChkRegularExpressionLast)
			end if
			do \form@focusDrawEditor()
		end if
	end if

	func findAll(key: []char, value: \doc@Doc, data: FindData): bool
		if(value <>$ \doc_src@DocSrc)
			ret true
		end if
		if(key[0] <> '\\')
			ret true
		end if
		do (value $ \doc_src@DocSrc).findAll(data.list_, data.poses, key, data.pattern, data.distinguishCase, data.onlyWord, data.regularExpression)
		ret true
	end func

	func wndResultListItemsOnSel(wnd: wnd@List)
		var sel: int :: wnd.getSel()
		if(sel = -1)
			ret
		end if
		do @resultPoses.head()
		do \src@jumpSrc(@resultPoses.getOffset(sel))
	end func
end func

func wndFindBtnPrevOnPush(wnd: wnd@Btn)
	if(@wndFindEditPatternLast <>& null)
		do @findPrev()
	end if
end func

+func findNext()
	if(@wndFindRadioDoc <>& null & !@wndFindRadioDoc.getChk())
		ret
	end if
	do @findNextImpl(@wndFindEditPatternLast, @wndFindChkDistinguishCaseLast, @wndFindChkOnlyWordLast, @wndFindChkRegularExpressionLast)
	do \form@focusDrawEditor()
end func

+func findPrev()
	do @findPrevImpl(@wndFindEditPatternLast, @wndFindChkDistinguishCaseLast, @wndFindChkOnlyWordLast, @wndFindChkRegularExpressionLast)
	do \form@focusDrawEditor()
end func

func findNextImpl(pattern: []char, distinguishCase: bool, onlyWord: bool, regularExpression: bool)
	if(\src@curDoc =$ \doc_src@DocSrc & !(\src@curDoc $ \doc_src@DocSrc).findNext(pattern, distinguishCase, onlyWord, regularExpression))
		do wnd@msgBox(@wndFind, \common@langEn ?("No strings match your search.", "検索した単語は見つかりませんでした。"), \common@title, %info, %ok)
	end if
end func

func findPrevImpl(pattern: []char, distinguishCase: bool, onlyWord: bool, regularExpression: bool)
	if(\src@curDoc =$ \doc_src@DocSrc & !(\src@curDoc $ \doc_src@DocSrc).findPrev(pattern, distinguishCase, onlyWord, regularExpression))
		do wnd@msgBox(@wndFind, \common@langEn ?("No strings match your search.", "検索した単語は見つかりませんでした。"), \common@title, %info, %ok)
	end if
end func

func replaceOne(pattern: []char, replaceStr: []char, distinguishCase: bool, onlyWord: bool, regularExpression: bool)
	if(\src@curDoc =$ \doc_src@DocSrc)
		var doc: \doc_src@DocSrc :: \src@curDoc $ \doc_src@DocSrc
		do doc.replaceOne(pattern, replaceStr, distinguishCase, onlyWord, regularExpression)
		if(!doc.findNext(pattern, distinguishCase, onlyWord, regularExpression))
			do wnd@msgBox(@wndFind, \common@langEn ?("No strings match your search.", "検索した単語は見つかりませんでした。"), \common@title, %info, %ok)
		end if
	end if
end func

func replaceAll(pattern: []char, replaceStr: []char, distinguishCase: bool, onlyWord: bool, regularExpression: bool)
	if(\src@curDoc =$ \doc_src@DocSrc)
		var doc: \doc_src@DocSrc :: \src@curDoc $ \doc_src@DocSrc
		var msg: []char
		if(\common@langEn)
			do msg :: "Do you want to replace all \"" ~ pattern ~ "\" with \"" ~ replaceStr ~ "\" in the current document?"
		else
			do msg :: "現在のドキュメントの「" ~ pattern ~ "」を「" ~ replaceStr ~ "」に、すべて置換しますか？"
		end if
		if(wnd@msgBox(@wndFind, msg, \common@title, %warn, %yesNoCancel) = %yes)
			var cnt: int :: doc.replaceAll(pattern, replaceStr, distinguishCase, onlyWord, regularExpression)
			if(\common@langEn)
				do msg :: cnt.toStr() ~ " string(s) have been replaced."
			else
				do msg :: cnt.toStr() ~ "個の文字列を置換しました。"
			end if
			do wnd@msgBox(@wndFind, msg, \common@title, %info, %ok)
		end if
	end if
end func

func replaceSel(pattern: []char, replaceStr: []char, distinguishCase: bool, onlyWord: bool, regularExpression: bool)
	if(\src@curDoc =$ \doc_src@DocSrc)
		var doc: \doc_src@DocSrc :: \src@curDoc $ \doc_src@DocSrc
		var msg: []char
		if(\common@langEn)
			do msg :: "Do you want to replace all \"" ~ pattern ~ "\" with \"" ~ replaceStr ~ "\" in current selection range?"
		else
			do msg :: "現在の選択範囲の「" ~ pattern ~ "」を「" ~ replaceStr ~ "」に、すべて置換しますか？"
		end if
		if(wnd@msgBox(@wndFind, msg, \common@title, %warn, %yesNoCancel) = %yes)
			var cnt: int :: doc.replaceSel(pattern, replaceStr, distinguishCase, onlyWord, regularExpression)
			if(\common@langEn)
				do msg :: cnt.toStr() ~ " string(s) have been replaced."
			else
				do msg :: cnt.toStr() ~ "個の文字列を置換しました。"
			end if
			do wnd@msgBox(@wndFind, msg, \common@title, %info, %ok)
		end if
	end if
end func

func replaceAllInAllDocs(pattern: []char, replaceStr: []char, distinguishCase: bool, onlyWord: bool, regularExpression: bool)
	class FindData()
		+var cnt: int
		+var pattern_: []char
		+var replaceStr_: []char
		+var distinguishCase_: bool
		+var onlyWord_: bool
		+var regularExpression_: bool
	end class

	var msg: []char
	if(\common@langEn)
		do msg :: "Do you want to replace all \"" ~ pattern ~ "\" with \"" ~ replaceStr ~ "\" in all documents?"
	else
		do msg :: "すべてのドキュメントの「" ~ pattern ~ "」を「" ~ replaceStr ~ "」に、すべて置換しますか？"
	end if
	if(wnd@msgBox(@wndFind, msg, \common@title, %warn, %yesNoCancel) <> %yes)
		ret
	end if
	var data: FindData :: #FindData
	do data.cnt :: 0
	do data.pattern_ :: pattern
	do data.replaceStr_ :: replaceStr
	do data.distinguishCase_ :: distinguishCase
	do data.onlyWord_ :: onlyWord
	do data.regularExpression_ :: regularExpression
	do \src@docs.forEach(replaceAll, data)
	if(\common@langEn)
		do msg :: data.cnt.toStr() ~ " string(s) have been replaced."
	else
		do msg :: data.cnt.toStr() ~ "個の文字列を置換しました。"
	end if
	do wnd@msgBox(@wndFind, msg, \common@title, %info, %ok)

	func replaceAll(key: []char, value: \doc@Doc, data: FindData): bool
		if(value <>$ \doc_src@DocSrc)
			ret true
		end if
		if(key[0] <> '\\')
			ret true
		end if
		do data.cnt :+ (value $ \doc_src@DocSrc).replaceAll(data.pattern_, data.replaceStr_, data.distinguishCase_, data.onlyWord_, data.regularExpression_)
		ret true
	end func
end func

+func runTabOrder(key: wnd@Key, shiftCtrl: wnd@ShiftCtrl): bool
	if(@tabOrderFind <>& null & @tabOrderFind.chk(key, shiftCtrl))
		ret true
	end if
	ret false
end func
