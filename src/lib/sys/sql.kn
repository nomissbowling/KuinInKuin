#exe
func[d1005.knd, _init]_init()
end func

+class Sql()
	*func[__ndc]ctor()
	end func
	
	*func[__frc]_dtor()
		do me.fin()
	end func
	
	+func[d1005.knd, _sqlApply]apply(): bool
	end func
	
	+func[d1005.knd, _sqlErrMsg]errMsg(): []char
	end func
	
	+func[d1005.knd, _sqlExec]exec(cmd: []char): bool
	end func
	
	+func[d1005.knd, _sqlFin]fin()
	end func
	
	+func[d1005.knd, _sqlGetBlob]getBlob(col: int): []bit8
	end func
	
	+func[d1005.knd, _sqlGetFloat]getFloat(col: int): float
	end func
	
	+func[d1005.knd, _sqlGetInt]getInt(col: int): int
	end func
	
	+func[d1005.knd, _sqlGetStr]getStr(col: int): []char
	end func
	
	+func[d1005.knd, _sqlNext]next()
	end func
	
	+func[d1005.knd, _sqlPrepare]prepare(cmd: []char): bool
	end func
	
	+func[d1005.knd, _sqlSetBlob]setBlob(idx: int, value: []bit8): bool
	end func
	
	+func[d1005.knd, _sqlSetFloat]setFloat(idx: int, value: float): bool
	end func
	
	+func[d1005.knd, _sqlSetInt]setInt(idx: int, value: int): bool
	end func
	
	+func[d1005.knd, _sqlSetStr]setStr(idx: int, value: []char): bool
	end func
	
	+func[d1005.knd, _sqlTerm]term(): bool
	end func
	
	var db: int
	var statement: int
	var result: int
end class

+func[d1005.knd, _makeSql, __mki]makeSql(me2: @Sql, path: []char): @Sql
end func
