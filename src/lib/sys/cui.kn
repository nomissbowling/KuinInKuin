const strBufSize: int :: 1024
var delimiters: []char :: " ,\n"
var buf: char :: '\0'

+func delimiter(delimiters_: []char)
	do @delimiters :: delimiters_
end func

#exe
+func[d0000.knd, _flush]flush()
#cpp,web
+func flush()
#cpp
	excode "std::cout<<std::flush;\n"
#web
#any
end func

+func input(): []char
#exe,cpp
	var buf: []char :: #[@strBufSize]char
	var ptr: int :: 0
	while loop(true)
		var c: char :: @inputLetter()
		if(c = '\u000D')
			skip loop
		end if
		if(c = '\uFFFF')
			if(ptr = 0)
				ret null
			end if
			break loop
		end if
		if(c = '\n')
			break loop
		end if
		if(ptr = ^buf)
			do buf :~ #[@strBufSize]char
		end if
		do buf[ptr] :: c
		do ptr :+ 1
	end while
	ret buf.sub(0, ptr)
#web
	ret null
#any
end func

+func inputChar(): char
#exe,cpp
	while loop(true)
		var c: char :: @inputCharWithDelimiter()
		if(c <> '\0')
			if(c = '\uFFFF')
				throw 0xE9170008
			end if
			do @skipDelimiters()
			ret c
		end if
	end while
#web
	ret 0 $ char
#any
end func

+func inputFloat(): float
#exe,cpp
	var s: []char :: @inputStr()
	var b: bool
	var r: float :: s.toFloat(&b)
	if(!b)
		throw 0xE9170008
	end if
	ret r
#web
	ret 0.0
#any
end func

+func inputInt(): int
#exe,cpp
	var s: []char :: @inputStr()
	var b: bool
	var r: int :: s.toInt(&b)
	if(!b)
		throw 0xE9170008
	end if
	ret r
#web
	ret 0
#any
end func

#exe
+func[d0000.knd, _inputLetter]inputLetter(): char
#cpp,web
+func inputLetter(): char
	if(@buf <> '\0')
		var r: char :: @buf
		do @buf :: '\0'
		ret r
	end if
#cpp
	; TODO:
#web
	ret 0 $ char
#any
end func

+func inputStr(): []char
#exe,cpp
	var buf: []char :: #[@strBufSize]char
	var ptr: int :: 0
	while loop(true)
		var c: char :: @inputCharWithDelimiter()
		if(c = '\uFFFF')
			if(ptr = 0)
				throw 0xE9170008
			end if
			break loop
		end if
		if(c = '\0')
			if(ptr = 0)
				skip loop
			end if
			break loop
		end if
		if(ptr = ^buf)
			do buf :~ #[@strBufSize]char
		end if
		do buf[ptr] :: c
		do ptr :+ 1
	end while
	do @skipDelimiters()
	ret buf.sub(0, ptr)
#web
	ret null
#any
end func

#exe
+func[d0000.knd, _print]print(str: []char)
#cpp,web
+func print(str: []char)
#cpp
	excode "if(`0`==nullptr){\n"
	excode "std::cout<<\"(null)\";\n"
	excode "return;\n"
	excode "}\n"
	excode "std::u16string s_=`0`->B;\n"
	excode "const std::string&t_=utf16ToUtf8_(s_);\n"
	excode "std::cout<<t_;\n"
#web
	excode "if(`0`==null)`0`={S:\"(null)\"};\n"
	excode "if(O_&&O_.print){O_.print(`0`.S);return;}\n"
	excode "console.log(`0`.S);\n"
#any
end func

#exe,cpp
func inputCharWithDelimiter(): char
	while loop(true)
		var c: char :: @inputLetter()
		for i(0, ^@delimiters - 1)
			if(c = @delimiters[i] | (c = '\u000D' & @delimiters[i] = '\n'))
				ret '\0'
			end if
		end for
		if(c = '\u000D')
			skip loop
		end if
		ret c
	end while
end func

func skipDelimiters()
	while loop(true)
		var c: char :: @inputLetter()
		for i(0, ^@delimiters - 1)
			if(c = @delimiters[i] | (c = '\u000D' & @delimiters[i] = '\n'))
				skip loop
			end if
		end for
		if(c = '\u000D')
			skip loop
		end if
		do @buf :: c
		ret
	end while
end func
#any
