+const pi: float :: 3.14159265358979323846
+const e: float :: 2.71828182845904523536
+const intMin: int :: -9223372036854775807 - 1
+const intMax: int :: 9223372036854775807

+func[__raw, cmdLine]cmdLine(): [][]char
end func

+func[__raw, exitCode]exitCode(code: int)
	if(dbg)
		if(code < 0 | 0xFFFFFFFF < code)
			throw excpt@dbgArgOutDomain
		end if
	end if
end func

+class Rnd()
	*func[d0000.knd, _rndDtor, __frc]_dtor()
	end func
	
	+func[d0000.knd, _rndRnd]rnd(min: int, max: int): int
	end func
	
	+func[d0000.knd, _rndRndFloat]rndFloat(min: float, max: float): float
	end func
	
	+func[d0000.knd, _rndRndBit64]rndBit64(): bit64
	end func
	
	var rndState: int
end class

+func[d0000.knd, _makeRnd, __mki]makeRnd(me2: @Rnd, seed: int): @Rnd
end func

+func[__raw, rnd]rnd(min: int, max: int): int
end func

+func[__raw, rndFloat]rndFloat(min: float, max: float): float
end func

+func[d0000.knd, _rndBit64]rndBit64(): bit64
end func

+func[d0000.knd, _rndUuid]rndUuid(): []char
end func

+func[__raw, cos]cos(x: float): float
end func

+func[__raw, sin]sin(x: float): float
end func

+func[__raw, tan]tan(x: float): float
end func

+func[__raw, acos]acos(x: float): float
end func

+func[__raw, asin]asin(x: float): float
end func

+func[__raw, atan]atan(x: float): float
end func

+func[__raw, cosh]cosh(x: float): float
end func

+func[__raw, sinh]sinh(x: float): float
end func

+func[__raw, tanh]tanh(x: float): float
end func

+func[__raw, acosh]acosh(x: float): float
end func

+func[__raw, asinh]asinh(x: float): float
end func

+func[__raw, atanh]atanh(x: float): float
end func

+func[__raw, sqrt]sqrt(x: float): float
end func

+func[__raw, exp]exp(x: float): float
end func

+func[__raw, ln]ln(x: float): float
end func

+func log(base: float, x: float): float
	ret @ln(x) / @ln(base)
end func

+func[__raw, floor]floor(x: float): float
end func

+func[__raw, ceil]ceil(x: float): float
end func

+func round(x: float, precision: int): float
	if(precision = 0)
		ret x >= 0.0 ?(@floor(x + 0.5), -@floor(-x + 0.5))
	else
		var p: float :: 10.0 ^ (precision $ float)
		ret x >= 0.0 ?(@floor(x * p + 0.5) / p, -@floor(-x * p + 0.5) / p)
	end if
end func

+func rot(x: &float, y: &float, centerX: float, centerY: float, angle: float)
	var x2: float :: x - centerX
	var y2: float :: y - centerY
	var cosTheta: float :: @cos(angle)
	var sinTheta: float :: @sin(angle)
	var x3: float :: x2 * cosTheta - y2 * sinTheta
	var y3: float :: x2 * sinTheta + y2 * cosTheta
	do x :: x3 + centerX
	do y :: y3 + centerY
end func

+func[__raw, invRot]invRot(x: float, y: float, centerX: float, centerY: float): float
end func

+func[__raw, dist]dist(x: float, y: float, centerX: float, centerY: float): float
end func

+func chase(x: &float, target: float, vel: float): bool
	if(x = target)
		ret true
	end if
	if(x < target)
		do x :+ vel
		if(x >= target)
			do x :: target
			ret true
		end if
	else
		do x :- vel
		if(x <= target)
			do x :: target
			ret true
		end if
	end if
	ret false
end func

+func same(n1: float, n2: float): bool
	var max: float :: 1.0
	if(max < n1)
		do max :: n1
	end if
	if(max < n2)
		do max :: n2
	end if
	ret(n1 - n2).abs() <= 2.220446049250313e-16 * max
end func

+func toRad(degree: float): float
	ret degree * @pi / 180.0
end func

+func toDegree(rad: float): float
	ret rad * 180.0 / @pi
end func

+func cmp(s1: []char, s2: []char): int
	var p: int :: 0
	while(p < ^s1 & p < ^s2)
		if(s1[p] <> s2[p])
			ret s1[p] > s2[p] ?(1, s1[p] < s2[p] ?(-1, 0))
		end if
		do p :+ 1
	end while
	ret ^ s1 > ^s2 ?(1, ^s1 < ^s2 ?(-1, 0))
end func

+func[d0000.knd, _cmpEx]cmpEx(s1: []char, s2: []char, len: int, ignoreCase: bool): int
end func

+func min(n1: int, n2: int): int
	ret n1 <= n2 ?(n1, n2)
end func

+func minFloat(n1: float, n2: float): float
	ret n1 <= n2 ?(n1, n2)
end func

+func max(n1: int, n2: int): int
	ret n1 >= n2 ?(n1, n2)
end func

+func maxFloat(n1: float, n2: float): float
	ret n1 >= n2 ?(n1, n2)
end func

+func[d0000.knd, _levenshtein]levenshtein(s1: []char, s2: []char): int
end func

+func[d0000.knd, _lerp]lerp(first: float, last: float, rate: float): float
end func

+func[d0000.knd, _qerp]qerp(first: float, last: float, easeIn: bool, rate: float): float
end func

+func[d0000.knd, _cerp]cerp(first: float, last: float, rate: float): float
end func

+func[d0000.knd, _hermite]hermite(pos: []float, rate: float): float
end func

+class BmSearch()
	*func[d0000.knd, _bmSearchDtor, __frc]_dtor()
	end func
	
	+func[d0000.knd, _bmSearchFind]find(text: []char, start: int): int
	end func
	
	var pattern: int
	var dists: int
	var len: int
end class

+func[d0000.knd, _makeBmSearch, __mki]makeBmSearch(me2: @BmSearch, pattern: []char): @BmSearch
end func

+func[__raw, sysTime]sysTime(): int
end func

+func[__raw, now]now(): int
end func

+func intToDate(time: int, year: &int, month: &int, day: &int, hour: &int, minute: &int, second: &int): int
	var t: int :: time + 719468 * 86400
	var a: int :: t / 86400
	var b: int :: (a >= 0 ?(a, a - 146096)) / 146097
	var c: int :: a - b * 146097
	var d: int :: (c - c / 1460 + c / 36524 - c / 146096) / 365
	var e: int :: c - (365 * d + d / 4 - d / 100)
	var f: int :: (5 * e + 2) / 153
	do day :: e - (153 * f + 2) / 5 + 1
	do month :: f + (f < 10 ?(3, -9))
	do year :: d + b * 400 + (month <= 2 ?(1, 0))
	var s: int :: t % 86400
	do hour :: s / 3600
	do s :- hour * 3600
	do minute :: s / 60
	do second :: s - minute * 60
	var g: int :: a - 719468
	ret g >= -4 ?((g + 4) % 7, (g + 5) % 7 + 6)
end func

+func dateToInt(year: int, month: int, day: int, hour: int, minute: int, second: int): int
	assert 1 <= month & month <= 12 & 1 <= day & day <= 31 & 0 <= hour & hour <= 23 & 0 <= minute & minute <= 59 & 0 <= second & second <= 59
	var a: int :: year - (month <= 2 ?(1, 0))
	var b: int :: (a >= 0 ?(a, a - 399)) / 400
	var c: int :: a - b * 400
	var d: int :: (153 * (month + (month > 2 ?(-3, 9))) + 2) / 5 + day - 1
	ret(b * 146097 + c * 365 + c / 4 - c / 100 + d - 719468) * 86400 + hour * 3600 + minute * 60 + second
end func

+func[d0000.knd, _intToLocalDate]intToLocalDate(time: int, year: &int, month: &int, day: &int, hour: &int, minute: &int, second: &int): int
end func

+func[d0000.knd, _localDateToInt]localDateToInt(year: int, month: int, day: int, hour: int, minute: int, second: int): int
end func

+func[d0000.knd]sleep(ms: int)
end func

+func[d0000.knd, _countUp]countUp(min: int, max: int): []int
end func

+func[__raw, addr]addr(class_: kuin@Class): bit64
end func

+class Int()
	+*func cmp(t: @Int): int
		ret(me.value - t.value).sign()
	end func
	
	+*func toStr(): []char
		ret me.value.toStr()
	end func
	
	+var value: int
end class

+class Float()
	+*func cmp(t: @Float): int
		ret(me.value - t.value).sign() $ int
	end func
	
	+*func toStr(): []char
		ret me.value.toStr()
	end func
	
	+var value: float
end class

+class Bool()
	+*func cmp(t: @Bool): int
		ret(me.value $ int - t.value $ int).sign()
	end func
	
	+*func toStr(): []char
		ret me.value.toStr()
	end func
	
	+var value: bool
end class

+class Char()
	+*func cmp(t: @Char): int
		ret(me.value $ int - t.value $ int).sign()
	end func
	
	+*func toStr(): []char
		ret me.value.toStr()
	end func
	
	+var value: char
end class

+class Str()
	+*func cmp(t: @Str): int
		ret @cmp(me.value, t.value)
	end func
	
	+*func toStr(): []char
		ret me.value
	end func
	
	+var value: []char
end class
