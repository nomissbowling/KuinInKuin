+enum Origin
	head
	cur
	tail
end enum

+enum SysDir
	desktop :: 0x00
	fonts :: 0x14
	appData :: 0x1A
	windows :: 0x24
	system32 :: 0x25
	programFiles :: 0x26
end enum

+class Reader()
	*func ctor()
		do me.delimiters :: " ,\n"
	end func
	
	*func[__frc]_dtor()
		do me.fin()
	end func
	
	+func delimiter(delimiters: []char)
		do me.delimiters :: delimiters
	end func
	
	+func fileSize(): int
		ret 0 { TODO: }
	end func
	
	+func fin()
		excode "`0`.`.handle`.F=null;\n"
	end func
	
	+func getPos(): int
		excode "let n_= `0`.`.handle`.I;\n"
		excode "return Uint32Array.from([n_<0?-1:0,n_]);\n"
	end func
	
	+func read(size: int): []bit8
		; TODO:
	end func
	
	+func readChar(): char
		while loop(true)
			var c: char :: me.readCharWithDelimiters()
			if(c <> '\0')
				if(c = '\uFFFF')
					throw excpt@invalidDataFmt
				end if
				ret c
			end if
		end while
	end func
	
	+func readFloat(): float
		var s: []char :: me.readStr()
		var b: bool
		var r: float :: s.toFloat(&b)
		if(!b)
			throw excpt@invalidDataFmt
		end if
		ret r
	end func
	
	+func readInt(): int
		var s: []char :: me.readStr()
		var b: bool
		var r: int :: s.toInt(&b)
		if(!b)
			throw excpt@invalidDataFmt
		end if
		ret r
	end func
	
	+func readLetter(): char
		excode "return `0`.`.handle`.F.charCodeAt(`0`.`.handle`.I++);\n"
	end func
	
	+func readLine(): []char
		var buf: []char :: #[strBufSize]char
		var ptr: int :: 0
		while loop(true)
			var c: char :: me.readLetter()
			if(c = '\u000D')
				skip loop
			end if
			if(c = '\uFFFF')
				break loop
			end if
			if(c = '\n')
				break loop
			end if
			if(ptr = ^buf)
				do buf :~ #[strBufSize]char
			end if
			do buf[ptr] :: c
			do ptr :+ 1
		end while
		ret buf.sub(0, ptr)
	end func
	
	+func readStr(): []char
		var buf: []char :: #[strBufSize]char
		var ptr: int :: 0
		while loop(true)
			var c: char :: me.readCharWithDelimiters()
			if(c = '\uFFFF')
				if(^buf = 0)
					throw excpt@invalidDataFmt
				end if
				break loop
			end if
			if(c = '\0')
				if(^buf = 0)
					skip loop
				end if
				break loop
			end if
			if(ptr = ^buf)
				do buf :~ #[strBufSize]char
			end if
			do buf[ptr] :: c
			do ptr :+ 1
		end while
		ret buf.sub(0, ptr)
	end func
	
	+func setPos(origin: @Origin, pos: int)
		excode "switch(`1`){\n"
		excode "case 0:`0`.`.handle`.I=~~`2`[1];break;\n"
		excode "case 1:`0`.`.handle`.I+=~~`2`[1];break;\n"
		excode "case 2:`0`.`.handle`.I=`0`.`.handle`.F.length+~~`2`[1];break;\n"
		excode "}\n"
	end func
	
	+func term(): bool
		excode "return `0`.`.handle`.I>=`0`.`.handle`.F.length;\n"
	end func
	
	func readCharWithDelimiters(): char
		while loop(true)
			var c: char :: me.readLetter()
			for i(0, ^me.delimiters - 1)
				if(c = me.delimiters[i] | (c = '\u000D' & me.delimiters[i] = '\n'))
					ret '\0'
				end if
			end for
			if(c = '\u000D')
				skip loop
			end if
			ret c
		end while
	end func
	
	const strBufSize: int :: 1024
	var handle: int
	var delimiters: []char
	var fileSize_: int
end class

+class Writer()
	*func[__frc]_dtor()
		do me.fin()
	end func
	
	+func fin()
		excode "let d_=`0`.`.handle`.F.replace(/\\n/g, \"\\u000D\\n\");\n"
		excode "if(O_&&O_.writeFile){O_.writeFile(`0`.`.handle`.P,d_);return;}\n"
		excode "let b_=new Blob([d_]);\n"
		excode "let l_=document.createElement(\"a\");\n"
		excode "l_.download=`0`.`.handle`.P;\n"
		excode "l_.href=(URL||webkitURL).createObjectURL(b_);\n"
		excode "l_.setAttribute(\"style\",\"display:none\");\n"
		excode "document.body.appendChild(l_);\n"
		excode "l_.click();\n"
		excode "document.body.removeChild(l_);\n"
		excode "`0`.`.handle`.F=null;\n"
	end func
	
	+func flush()
		; TODO:
	end func

	+func getPos(): int
		excode "let n_= `0`.`.handle`.I;\n"
		excode "return Uint32Array.from([n_<0?-1:0,n_]);\n"
	end func
	
	+func setPos(origin: @Origin, pos: int)
		excode "switch(`1`){\n"
		excode "case 0:`0`.`.handle`.I=~~`2`[1];break;\n"
		excode "case 1:`0`.`.handle`.I+=~~`2`[1];break;\n"
		excode "case 2:`0`.`.handle`.I=`0`.`.handle`.F.length+~~`2`[1];break;\n"
		excode "}\n"
	end func
	
	+func write(bin: []bit8)
		; TODO:
	end func
	
	+func writeChar(n: char)
		excode "if(`0`.`.handle`.I<`0`.`.handle`.F.length)\n"
		excode "`0`.`.handle`.F=`0`.`.handle`.F.slice(0,`0`.`.handle`.I)+String.fromCharCode(`1`)+`0`.`.handle`.F.slice(`0`.`.handle`.I+1);\n"
		excode "else\n"
		excode "`0`.`.handle`.F+=String.fromCharCode(`1`);\n"
		excode "`0`.`.handle`.I++;\n"
	end func
	
	+func writeFloat(n: float)
		var s: []char :: n.toStr()
		for i(0, ^s - 1)
			do me.writeChar(s[i])
		end for
	end func
	
	+func writeInt(n: int)
		var s: []char :: n.toStr()
		for i(0, ^s - 1)
			do me.writeChar(s[i])
		end for
	end func
	
	+func writeStr(n: []char)
		for i(0, ^n - 1)
			do me.writeChar(n[i])
		end for
	end func
	
	var handle: int
end class

+func copyDir(dst: []char, src: []char): bool
	; TODO:
end func

+func copyFile(dst: []char, src: []char): bool
	ret false {TODO:}
end func

+func delDir(path: []char): bool
	; TODO:
end func

+func delExt(path: []char): []char
	assert path <>& null
	var p: int :: ^path - 1
	while(p >= 0 & path[p] <> '/' & path[p] <> '\\' & path[p] <> '.')
		do p :- 1
	end while
	if(p < 0 | path[p] <> '.')
		ret path
	end if
	var r: []char :: #[p]char
	for i(0, p - 1)
		do r[i] :: path[i] = '\\' ?('/', path[i])
	end for
	ret r
end func

+func delFile(path: []char): bool
	; TODO:
end func

+func dir(path: []char): []char
	assert path <>& null
	var p: int :: ^path - 1
	while(p >= 0 & path[p] <> '/' & path[p] <> '\\')
		do p :- 1
	end while
	if(p < 0)
		ret "./"
	else
		var r: []char :: #[p + 1]char
		for i(0, p)
			do r[i] :: path[i] = '\\' ?('/', path[i])
		end for
		ret r
	end if
end func

+func exeDir(): []char
	; TODO:
end func

+func exist(path: []char): bool
	excode "let f_=false,p_=`0`.S;\n"
	excode "if(O_&&O_.readFile)f_=O_.readFile(p_)!=null;\n"
	excode "if(f_==false){\n"
	excode "if(p_.length>=4&&p_[0]==\"r\"&&p_[1]==\"e\"&&p_[2]==\"s\"&&p_[3]==\"/\")\n"
	excode "f_=F_(p_,false);\n"
	excode "else{\n"
	; TODO:
	excode "}\n"
	excode "}\n"
	excode "return f_;\n"
end func

+func ext(path: []char): []char
	assert path <>& null
	var p: int :: ^path - 1
	while(p >= 0 & path[p] <> '/' & path[p] <> '\\' & path[p] <> '.')
		do p :- 1
	end while
	if(path[p] <> '.')
		ret ""
	else
		do p :+ 1
		var r: []char :: #[^path - p]char
		for i(0, ^path - p - 1)
			do r[i] :: path[p + i]
		end for
		ret r
	end if
end func

+func fileName(path: []char): []char
	assert path <>& null
	var p: int :: ^path - 1
	while(p >= 0 & path[p] <> '/' & path[p] <> '\\')
		do p :- 1
	end while
	if(p < 0)
		ret path
	end if
	do p :+ 1
	var r: []char :: #[^path - p]char
	for i(0, ^path - p - 1)
		do r[i] :: path[p + i]
	end for
	ret r
end func

+func fileSize(path: []char): int
	; TODO:
end func

+func forEach(path: []char, recursion: bool, callback: func<([]char, bool, kuin@Class): bool>, data: kuin@Class): bool
	excode "let f_,p_=`0`.S;\n"
	excode "if(p_.length>=4&&p_[0]==\"r\"&&p_[1]==\"e\"&&p_[2]==\"s\"&&p_[3]==\"/\")\n"
	excode "f_=FF_();\n"
	excode "for(let i_=0;i_<f_.length;i_++){\n"
	excode "if(f_[i_].slice(0,p_.length)==p_&&(`1`||f_[i_].slice(p_.length).indexOf(\"/\")==-1)){\n"
	excode "if(!`2`({S:f_[i_]},f_[i_][f_[i_].length-1]=='/',`3`))return false"
	excode "}\n"
	excode "}\n"
	excode "return true;\n"
end func

+func fullPath(path: []char): []char
	; TODO:
end func

+func getCurDir(): []char
	; TODO:
end func

+func makeDir(path: []char): bool
	; TODO:
end func

+func[__mki]makeReader(me2: @Reader, path: []char): @Reader
	excode "let f_=null,p_=`1`.S;\n"
	excode "if(O_&&O_.readFile)f_=O_.readFile(p_);\n"
	excode "if(f_==null){\n"
	excode "if(p_.length>=4&&p_[0]==\"r\"&&p_[1]==\"e\"&&p_[2]==\"s\"&&p_[3]==\"/\")\n"
	excode "f_=F_(p_,true);\n"
	excode "else{\n"
	; TODO:
	excode "}\n"
	excode "}\n"
	excode "if(f_==null)return null;\n"
	excode "`0`.`.handle`={F:f_,I:0};\n"
	excode "return `0`;\n"
end func

+func[__mki]makeWriter(me2: @Writer, path: []char, append: bool): @Writer
	excode "`0`.`.handle`={F:\"\",I:0,P:`1`.S};\n"
	excode "return `0`;\n"
end func

+func moveDir(dst: []char, src: []char): bool
	; TODO:
end func

+func moveFile(dst: []char, src: []char): bool
	; TODO:
end func

+func setCurDir(path: []char)
	; TODO:
end func

+func sysDir(kind: @SysDir): []char
	; TODO:
end func
