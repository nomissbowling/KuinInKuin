+enum Origin
	head
	cur
	tail
end enum

+class Reader()
	*func[__ndc]ctor()
		do me.delimiters :: " ,\n"
	end func
	
	*func[__frc]_dtor()
		do me.fin()
	end func
	
	+func delimiter(delimiters: []char)
		do me.delimiters :: delimiters
	end func
	
	+func fileSize(): int
		ret me.fileSize_
	end func
	
	+func[d0000.knd, _readerFin]fin()
	end func
	
	+func[d0000.knd, _readerGetPos]getPos(): int
	end func
	
	+func[d0000.knd, _readerRead]read(size: int): []bit8
	end func
	
	+func readChar(): char
		while loop(true)
			var c: char :: me.readCharWithDelimiters()
			if(c <> '\0')
				if(c = '\uFFFF')
					throw 0xE9170008
				end if
				do me.skipDelimiters()
				ret c
			end if
		end while
	end func
	
	+func readFloat(): float
		var s: []char :: me.readStr()
		var b: bool
		var r: float :: s.toFloat(&b)
		if(!b)
			throw 0xE9170008
		end if
		ret r
	end func
	
	+func readInt(): int
		var s: []char :: me.readStr()
		var b: bool
		var r: int :: s.toInt(&b)
		if(!b)
			throw 0xE9170008
		end if
		ret r
	end func
	
	+func[d0000.knd, _readerReadLetter]readLetter(): char
	end func
	
	+func readLine(): []char
		var buf: []char :: #[strBufSize]char
		var ptr: int :: 0
		while loop(true)
			var c: char :: me.readLetter()
			if(c = '\u000D')
				skip loop
			end if
			if(c = '\uFFFF')
				if(ptr = 0)
					ret null
				end if
				break loop
			end if
			if(c = '\n')
				break loop
			end if
			if(ptr = ^buf)
				do buf :~ #[strBufSize]char
			end if
			do buf[ptr] :: c
			do ptr :+ 1
		end while
		ret buf.sub(0, ptr)
	end func
	
	+func readStr(): []char
		var buf: []char :: #[strBufSize]char
		var ptr: int :: 0
		while loop(true)
			var c: char :: me.readCharWithDelimiters()
			if(c = '\uFFFF')
				if(ptr = 0)
					throw 0xE9170008
				end if
				break loop
			end if
			if(c = '\0')
				if(ptr = 0)
					skip loop
				end if
				break loop
			end if
			if(ptr = ^buf)
				do buf :~ #[strBufSize]char
			end if
			do buf[ptr] :: c
			do ptr :+ 1
		end while
		do me.skipDelimiters()
		ret buf.sub(0, ptr)
	end func
	
	+func[d0000.knd, _readerSetPos]setPos(origin: @Origin, pos: int)
	end func
	
	+func[d0000.knd, _readerTerm]term(): bool
	end func
	
	func readCharWithDelimiters(): char
		while loop(true)
			var c: char :: me.readLetter()
			for i(0, ^me.delimiters - 1)
				if(c = me.delimiters[i] | (c = '\u000D' & me.delimiters[i] = '\n'))
					ret '\0'
				end if
			end for
			if(c = '\u000D')
				skip loop
			end if
			ret c
		end while
	end func
	
	func skipDelimiters()
		while loop(true)
			var c: char :: me.readLetter()
			for i(0, ^me.delimiters - 1)
				if(c = me.delimiters[i] | (c = '\u000D' & me.delimiters[i] = '\n'))
					skip loop
				end if
			end for
			if(c = '\u000D')
				skip loop
			end if
			if(c <> '\uFFFF')
				do me.setPos(%cur, -1)
			end if
			ret
		end while
	end func
	
	const strBufSize: int :: 1024
	var handle: int
	var delimiters: []char
	var fileSize_: int
end class

+class Writer()
	*func[__ndc]ctor()
	end func

	*func[__frc]_dtor()
		do me.fin()
	end func
	
	+func[d0000.knd, _writerFin]fin()
	end func
	
	+func[d0000.knd, _writerFlush]flush()
	end func

	+func[d0000.knd, _writerGetPos]getPos(): int
	end func
	
	+func[d0000.knd, _writerSetPos]setPos(origin: @Origin, pos: int)
	end func
	
	+func[d0000.knd, _writerWrite]write(bin: []bit8)
	end func
	
	+func[d0000.knd, _writerWriteChar]writeChar(n: char)
	end func
	
	+func writeFloat(n: float)
		var s: []char :: n.toStr()
		for i(0, ^s - 1)
			do me.writeChar(s[i])
		end for
	end func
	
	+func writeInt(n: int)
		var s: []char :: n.toStr()
		for i(0, ^s - 1)
			do me.writeChar(s[i])
		end for
	end func
	
	+func writeStr(n: []char)
		for i(0, ^n - 1)
			do me.writeChar(n[i])
		end for
	end func
	
	var handle: int
end class

+func copyDir(dst: []char, src: []char): bool
	; TODO:
end func

+func copyFile(dst: []char, src: []char): bool
	ret false {TODO:}
end func

+func delDir(path: []char): bool
	; TODO:
end func

+func delExt(path: []char): []char
	var p: int :: ^path - 1
	while(p >= 0 & path[p] <> '/' & path[p] <> '\\' & path[p] <> '.')
		do p :- 1
	end while
	if(p < 0 | path[p] <> '.')
		do p :: ^path
	end if
	var r: []char :: #[p]char
	for i(0, p - 1)
		do r[i] :: path[i] = '\\' ?('/', path[i])
	end for
	ret r
end func

+func delFile(path: []char): bool
	; TODO:
end func

+func dir(path: []char): []char
	assert path <>& null
	var p: int :: ^path - 1
	while(p >= 0 & path[p] <> '/' & path[p] <> '\\')
		do p :- 1
	end while
	if(p < 0)
		ret "./"
	end if
	var r: []char :: #[p + 1]char
	for i(0, p)
		do r[i] :: path[i] = '\\' ?('/', path[i])
	end for
	ret r
end func

+func exeDir(): []char
	; TODO:
end func

+func[d0000.knd, _existPath]exist(path: []char): bool
end func

+func ext(path: []char): []char
	assert path <>& null
	var p: int :: ^path - 1
	while(p >= 0 & path[p] <> '/' & path[p] <> '\\' & path[p] <> '.')
		do p :- 1
	end while
	if(path[p] <> '.')
		ret ""
	end if
	do p :+ 1
	var r: []char :: #[^path - p]char
	for i(0, ^path - p - 1)
		do r[i] :: path[p + i]
	end for
	ret r
end func

+func fileName(path: []char): []char
	assert path <>& null
	var p: int :: ^path - 1
	while(p >= 0 & path[p] <> '/' & path[p] <> '\\')
		do p :- 1
	end while
	if(p < 0)
		ret path
	end if
	do p :+ 1
	var r: []char :: #[^path - p]char
	for i(0, ^path - p - 1)
		do r[i] :: path[p + i]
	end for
	ret r
end func

+func fileSize(path: []char): int
	; TODO:
end func

+func[d0000.knd, _forEachDir]forEach(path: []char, recursion: bool, callback: func<([]char, bool, kuin@Class): bool>, data: kuin@Class): bool
end func

+func fullPath(path: []char): []char
	; TODO:
end func

+func getCurDir(): []char
	; TODO:
end func

+func makeDir(path: []char): bool
	; TODO:
end func

+func[d0000.knd, _makeReader, __mki]makeReader(me2: @Reader, path: []char): @Reader
end func

+func[d0000.knd, _makeWriter, __mki]makeWriter(me2: @Writer, path: []char, append: bool): @Writer
end func

+func moveDir(dst: []char, src: []char): bool
	; TODO:
end func

+func moveFile(dst: []char, src: []char): bool
	; TODO:
end func

+func setCurDir(path: []char)
	; TODO:
end func
