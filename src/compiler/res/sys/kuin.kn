+const envCui: bit64 :: 0b64
+const envWnd: bit64 :: 1b64
+const envWeb: bit64 :: 2b64
+const envCpp: bit64 :: 3b64

+class Class()
	func ctor()
	end func

	func _dtor()
	end func

	+func cmp(t: @Class): int
		throw 0xE9170004
	end func

	func _copy(): @Class
	end func

	func _toBin(): []bit8
	end func

	func _fromBin(bin: []bit8, idx: &int): @Class
	end func

	+func toStr(): []char
		ret ""
	end func
end class

func _init()
end func

func _fin()
end func

func _err(excpt: int)
end func

func _initVars()
end func

func _finVars()
end func

func [__any, __raw, toStr] _toStr(me_: int, type: []int): []char
end func

func [__raw, toStrFmtInt] _toStrFmtInt(me_: int, fmt: []char): []char
end func

func [__raw, toStrFmtFloat] _toStrFmtFloat(me_: float, fmt: []char): []char
end func

func _absInt(me_: int): int
	ret me_ >= 0 ?(me_, -me_)
end func

func _absFloat(me_: float): float
	ret me_ >= 0.0 ?(me_, -me_)
end func

func _signInt(me_: int): int
	ret me_ > 0 ?(1, me_ < 0 ?(-1, 0))
end func

func _signFloat(me_: float): float
	ret me_ > 0.0 ?(1.0, me_ < 0.0 ?(-1.0, 0.0))
end func

func _clampInt(me_: int, min: int, max: int): int
	ret me_ > max ?(max, me_ < min ?(min, me_))
end func

func _clampFloat(me_: float, min: float, max: float): float
	ret me_ > max ?(max, me_ < min ?(min, me_))
end func

func _clampMinInt(me_: int, min: int): int
	ret me_ < min ?(min, me_)
end func

func _clampMinFloat(me_: float, min: float): float
	ret me_ < min ?(min, me_)
end func

func _clampMaxInt(me_: int, max: int): int
	ret me_ > max ?(max, me_)
end func

func _clampMaxFloat(me_: float, max: float): float
	ret me_ > max ?(max, me_)
end func

func _offset(me_: char, n: int): char
	ret (me_ $ bit64 + n $ bit64) $ char
end func

func [__any, __tme, __rme, __raw, or] _or(me_: int, type: []int, n: int): int
end func

func [__any, __tme, __rme, __raw, and] _and(me_: int, type: []int, n: int): int
end func

func [__any, __tme, __rme, __raw, xor] _xor(me_: int, type: []int, n: int): int
end func

func [__any, __rme, __raw, not] _not(me_: int, type: []int): int
end func

func [__any, __rme, __raw, shl] _shl(me_: int, type: []int, n: int): int
end func

func [__any, __rme, __raw, shr] _shr(me_: int, type: []int, n: int): int
end func

func [__any, __rme, __raw, sar] _sar(me_: int, type: []int, n: int): int
end func

func [__any, __rme, __raw, endian] _endian(me_: int, type: []int): int
end func

func [__any, __rme, __raw, sub] _sub(me_: int, type: []int, start: int, len: int): int
end func

func [__any, __raw, reverse] _reverse(me_: int, type: []int)
end func

func [__any] _shuffle(me_: int, type: []int)
end func

func [__any, __raw, sortArray] _sortArray(me_: int, type: []int)
end func

func [__any] _sortList(me_: int, type: []int)
end func

func [__any, __tch, __raw, findArray] _findArray(me_: int, type: []int, item: int, start: int): int
end func

func [__any, __tch] _findList(me_: int, type: []int, item: int): bool
end func

func [__any, __tch, __raw, findLastArray] _findLastArray(me_: int, type: []int, item: int, start: int): int
end func

func [__any, __tch] _findLastList(me_: int, type: []int, item: int): bool
end func

func [__any, __tch, __raw, findBin] _findBin(me_: int, type: []int, item: int): int
end func

func [__any, __tch, __raw, fill] _fill(me_: int, type: []int, value: int)
end func

func [__any, __rch, __raw, min] _min(me_: int, type: []int): int
end func

func [__any, __rch, __raw, max] _max(me_: int, type: []int): int
end func

func [__any, __rme, __raw, repeat] _repeat(me_: int, type: []int, len: int): int
end func

func [__raw, toInt] _toInt(me_: []char, success: &bool): int
end func

func [__raw, toFloat] _toFloat(me_: []char, success: &bool): float
end func

func [__raw, toBit64] _toBit64(me_: []char, success: &bool): bit64
end func

func _lower(me_: []char): []char
	assert me_ <>& null
	var s: []char :: #[^me_]char
	for i(0, ^me_ - 1)
		if('A' <= me_[i] & me_[i] <= 'Z')
			do s[i] :: (me_[i] $ bit64 - 0x41b64 + 0x61b64) $ char
		else
			do s[i] :: me_[i]
		end if
	end for
	ret s
end func

func _upper(me_: []char): []char
	assert me_ <>& null
	var s: []char :: #[^me_]char
	for i(0, ^me_ - 1)
		if('a' <= me_[i] & me_[i] <= 'z')
			do s[i] :: (me_[i] $ bit64 - 0x61b64 + 0x41b64) $ char
		else
			do s[i] :: me_[i]
		end if
	end for
	ret s
end func

func _trim(me_: []char): []char
	assert me_ <>& null
	var f: int :: -1
	for i(0, ^me_ - 1)
		var c: bit64 :: me_[i] $ bit64
		if(!(0x09b64 <= c & c <= 0x0Db64 | c = 0x20b64 | c = 0xA0b64))
			do f :: i
			break i
		end if
	end for
	if(f = -1)
		ret me_
	end if
	var l: int :: -1
	for i(^me_ - 1, 0, -1)
		var c: bit64 :: me_[i] $ bit64
		if(!(0x09b64 <= c & c <= 0x0Db64 | c = 0x20b64 | c = 0xA0b64))
			do l :: i
			break i
		end if
	end for
	var r: []char :: #[l - f + 1]char
	for i(0, l - f)
		do r[i] :: me_[f + i]
	end for
	ret r
end func

func _trimLeft(me_: []char): []char
	assert me_ <>& null
	var f: int :: -1
	for i(0, ^me_ - 1)
		var c: bit64 :: me_[i] $ bit64
		if(!(0x09b64 <= c & c <= 0x0Db64 | c = 0x20b64 | c = 0xA0b64))
			do f :: i
			break i
		end if
	end for
	if(f = -1)
		ret me_
	end if
	var r: []char :: #[^me_ - f]char
	for i(0, ^me_ - f - 1)
		do r[i] :: me_[f + i]
	end for
	ret r
end func

func _trimRight(me_: []char): []char
	var l: int :: -1
	for i(^me_ - 1, 0, -1)
		var c: bit64 :: me_[i] $ bit64
		if(!(0x09b64 <= c & c <= 0x0Db64 | c = 0x20b64 | c = 0xA0b64))
			do l :: i
			break i
		end if
	end for
	if(l = -1)
		ret me_
	end if
	var r: []char :: #[l + 1]char
	for i(0, l)
		do r[i] :: me_[i]
	end for
	ret r
end func

func _split(me_: []char, delimiter: []char): [][]char
	var result: list<[]char> :: #list<[]char>
	var p: int :: 0
	while(true)
		var p2: int :: me_.findStr(delimiter, p)
		if(p2 = -1)
			do result.add(me_.sub(p, -1))
			ret result.toArray()
		end if
		do result.add(me_.sub(p, p2 - p))
		do p :: p2 + ^delimiter
	end while
end func

func _join(me_: [][]char, delimiter: []char): []char
	var t: int :: ^delimiter * (^me_ - 1)
	for i(0, ^me_ - 1)
		do t :+ ^me_[i]
	end for
	var r: []char :: #[t]char
	var p: int :: 0
	for i(0, ^me_ - 1)
		if(i <> 0)
			for j(0, ^delimiter - 1)
				do r[p] :: delimiter[j]
				do p :+ 1
			end for
		end if
		var s: []char :: me_[i]
		for j(0, ^s - 1)
			do r[p] :: s[j]
			do p :+ 1
		end for
	end for
	ret r
end func

func [d0000.knd] _replace(me_: []char, old: []char, new: []char): []char
end func

func _findStr(me_: []char, pattern: []char, start: int): int
	for i(start, ^me_ - ^pattern)
		for j(0, ^pattern - 1)
			if(me_[i + j] <> pattern[j])
				skip i
			end if
		end for
		ret i
	end for
	ret -1
end func

func _findStrLast(me_: []char, pattern: []char, start: int): int
	for i(start < ^me_ - ^pattern ?(start, ^me_ - ^pattern), 0, -1)
		for j(0, ^pattern - 1)
			if(me_[i + j] <> pattern[j])
				skip i
			end if
		end for
		ret i
	end for
	ret -1
end func

func [d0000.knd] _findStrEx(me_: []char, pattern: []char, start: int, fromLast: bool, ignoreCase: bool, wholeWord: bool): int
end func

func [__any, __tch, __raw, addList] _addList(me_: int, type: []int, item: int)
end func

func [__any, __tch, __raw, addStack] _addStack(me_: int, type: []int, item: int)
end func

func [__any, __tch, __raw, addQueue] _addQueue(me_: int, type: []int, item: int)
end func

func [__any, __tkv, __raw, addDict] _addDict(me_: int, type: []int, key: int, item: int)
end func

func [__any, __rch, __raw, getList] _getList(me_: int, type: []int): int
end func

func [__any, __rch, __raw, getStack] _getStack(me_: int, type: []int): int
end func

func [__any, __rch, __raw, getQueue] _getQueue(me_: int, type: []int): int
end func

func [__any, __tch, __rch, __raw, getDict] _getDict(me_: int, type: []int, key: int, existed: &bool): int
end func

func [__any, __rch] _getOffset(me_: int, type: []int, offset: int): int
end func

func [__any, __raw, head] _head(me_: int, type: []int)
end func

func [__any, __raw, moveOffset] _moveOffset(me_: int, type: []int, offset: int)
end func

func [__any, __raw, tail] _tail(me_: int, type: []int)
end func

func [__any, __raw, next] _next(me_: int, type: []int)
end func

func [__any, __raw, prev] _prev(me_: int, type: []int)
end func

func [__any, __raw, term] _term(me_: int, type: []int): bool
end func

func [__any] _termOffset(me_: int, type: []int, offset: int): bool
end func

func [__any, __raw, del] _del(me_: int, type: []int)
end func

func [__any] _delNext(me_: int, type: []int)
end func

func [__any, __tch, __raw, ins] _ins(me_: int, type: []int, item: int)
end func

func [__any, __rac, __raw, toArray] _toArray(me_: int, type: []int): int
end func

func [__any, __rak] _toArrayKey(me_: int, type: []int): int
end func

func [__any, __rav] _toArrayValue(me_: int, type: []int): int
end func

func [__any, __rch, __raw, peekQueue] _peekQueue(me_: int, type: []int): int
end func

func [__any, __rch, __raw, peekStack] _peekStack(me_: int, type: []int): int
end func

func [__any, __tch, __raw, exist] _exist(me_: int, type: []int, key: int): bool
end func

func [__any, __kvf, __raw, forEach] _forEach(me_: int, type: []int, callback: int, data: @Class): bool
end func

func [__any, __tch] _delDict(me_: int, type: []int, key: int)
end func

func [__any, __raw, idx] _idx(me_: int, type: []int): int
end func
