const major: int :: 2019
const minor: int :: 12
const micro: int :: 22

func main()
	if(!\option@acquireOption())
		do lib@exitCode(1)
		ret
	end if
	
	if(\option@version)
		do cui@print("Kuin Programming Language v.\{@major}.\{@minor}.\{@micro}\n")
		do cui@print("(C)Kuina-chan\n")
		do lib@exitCode(0)
		ret
	end if
	
	if(\option@help | \option@inputFile =& null)
		do cui@print("Usage: kuincl [-i input.kn] [-o output.kn] [-s 'sys' directory] [-e environment] [-a appcode] [-p 'res' directory] [-c icon.ico] [-r] [-h] [-v] [-q] [-x extended option]\n")
		do lib@exitCode(0)
		ret
	end if
	
	if(@build())
		do \err@err(%success, null, null)
		do lib@exitCode(0)
		ret
	end if
	
	if(!\option@quiet)
		do \err@err(%failure, null, null)
	end if
	do lib@exitCode(1)
end func

func build(): bool
	var asts: dict<[]char, \ast@Ast>
	var entry: \ast@AstFunc
	
	do \err@errCnt :: 0
	var beginTime: int :: lib@sysTime()
	do \err@err(%compilationStarted, null, [((lib@sysTime() - beginTime) $ float / 1000.0).toStr()])
	
	; 'Parse'
	do asts :: \parse@parse()
	do \err@err(%parsingCompleted, null, [((lib@sysTime() - beginTime) $ float / 1000.0).toStr()])
	
	; 'Analyze'
	var funcAttrs: dict<[]char, dict<[]char, bool>>
	do entry :: \analyze@analyze(asts, &funcAttrs)
	do \err@err(%semanticAnalysisCompleted, null, [((lib@sysTime() - beginTime) $ float / 1000.0).toStr()])
	
	; Stop compilation if some errors occur.
	if(\err@errCnt > 0)
		ret false
	end if
	
	; 'Res' files.
	class ResFiles()
		+var files: list<[]char>
	end class
	var resFiles: ResFiles :: #ResFiles
	do resFiles.files :: #list<[]char>
	if(file@exist(\option@resDir))
		do file@forEach(\option@resDir, true, searchResFiles, resFiles)
	end if
	
	; 'Output'
	switch(\option@env_)
	case %exe
		if(!\exe\output@output(entry, resFiles.files, funcAttrs))
			ret false
		end if
	case %cpp
		if(!\cpp\output@output(entry, resFiles.files))
			ret false
		end if
	case %web
		if(!\web\output@output(entry, resFiles.files))
			ret false
		end if
	default
		assert false
	end switch
	
	do \err@err(%generationProcessCompleted, null, [((lib@sysTime() - beginTime) $ float / 1000.0).toStr()])
	if(\err@errCnt > 0)
		ret false
	end if
	
	ret true
	
	func searchResFiles(path: []char, isDir: bool, data: kuin@Class): bool
		var data2: ResFiles :: data $ ResFiles
		do data2.files.add(path)
		ret true
	end func
end func
