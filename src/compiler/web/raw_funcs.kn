+func write(codes: list<[]char>, attr: []char, args: list<\ast@AstArg>, members: list<\ast@AstClassItem>)
	switch(attr)
	case "addr"
		; TODO:
	case "exist"
		; TODO:
	case "max"
		; TODO:
	case "min"
		; TODO:
	case "repeat"
		; TODO:
	case "cui_inputLetter"
		; TODO:
	case "file_copyFile"
		; TODO:
		do codes.add("return false;\n")
	case "file_exist"
		do args.head()
		var path: \web\output@WebInfo :: \web\output@getInfo(args.get())
		do codes.add("let f_=false,p_=\{path.id}.S;\n")
		do codes.add("if(O_&&O_.readFile)f_=O_.readFile(p_)!==null;\n")
		do codes.add("if(f_===false){\n")
		do codes.add("if(p_.length>=4&&p_[0]===\"r\"&&p_[1]===\"e\"&&p_[2]===\"s\"&&p_[3]===\"/\")\n")
		do codes.add("f_=F_(p_,false);\n")
		do codes.add("else{\n")
		; TODO:
		do codes.add("}\n")
		do codes.add("}\n")
		do codes.add("return f_;\n")
	case "file_forEach"
		do args.head()
		var path: \web\output@WebInfo :: \web\output@getInfo(args.get())
		do args.next()
		var recursion: \web\output@WebInfo :: \web\output@getInfo(args.get())
		do args.next()
		var callback: \web\output@WebInfo :: \web\output@getInfo(args.get())
		do args.next()
		var data: \web\output@WebInfo :: \web\output@getInfo(args.get())
		do codes.add("let f_,p_=\{path.id}.S;\n")
		do codes.add("if(p_.length>=4&&p_[0]===\"r\"&&p_[1]===\"e\"&&p_[2]===\"s\"&&p_[3]===\"/\")\n")
		do codes.add("f_=FF_();\n")
		do codes.add("for(let i_=0;i_<f_.length;i_++){\n")
		do codes.add("if(f_[i_].slice(0,p_.length)===p_&&(\{recursion.id}||f_[i_].slice(p_.length).indexOf(\"/\")===-1)){\n")
		do codes.add("if(!\{callback.id}({S:f_[i_]},f_[i_][f_[i_].length-1]==='/',\{data.id}))return false")
		do codes.add("}\n")
		do codes.add("}\n")
		do codes.add("return true;\n")
	case "file_makeReader"
		do args.head()
		var me_: \web\output@WebInfo :: \web\output@getInfo(args.get())
		do args.next()
		var path: \web\output@WebInfo :: \web\output@getInfo(args.get())
		var handle: \web\output@WebInfo :: search(members, "handle")
		do codes.add("let f_=null,p_=\{path.id}.S;\n")
		do codes.add("if(O_&&O_.readFile)f_=O_.readFile(p_);\n")
		do codes.add("if(f_===null){\n")
		do codes.add("if(p_.length>=4&&p_[0]===\"r\"&&p_[1]===\"e\"&&p_[2]===\"s\"&&p_[3]===\"/\")\n")
		do codes.add("f_=F_(p_,true);\n")
		do codes.add("else{\n")
		; TODO:
		do codes.add("}\n")
		do codes.add("}\n")
		do codes.add("if(f_===null)return null;\n")
		do codes.add("\{me_.id}.\{handle.id}={F:f_,I:0};\n")
		do codes.add("return \{me_.id};\n")
	case "file_makeWriter"
		do args.head()
		var me_: \web\output@WebInfo :: \web\output@getInfo(args.get())
		do args.next()
		var path: \web\output@WebInfo :: \web\output@getInfo(args.get())
		do args.next()
		var append: \web\output@WebInfo :: \web\output@getInfo(args.get())
		var handle: \web\output@WebInfo :: search(members, "handle")
		do codes.add("\{me_.id}.\{handle.id}={F:\"\",I:0,P:\{path.id}.S};\n")
		do codes.add("return \{me_.id};\n")
	case "file_readerFin"
		do args.head()
		var me_: \web\output@WebInfo :: \web\output@getInfo(args.get())
		var handle: \web\output@WebInfo :: search(members, "handle")
		do codes.add("\{me_.id}.\{handle.id}.F=null;\n")
	case "file_readerGetPos"
		do args.head()
		var me_: \web\output@WebInfo :: \web\output@getInfo(args.get())
		var handle: \web\output@WebInfo :: search(members, "handle")
		do codes.add("return \{me_.id}.\{handle.id}.I;\n")
	case "file_readerReadLetter"
		do args.head()
		var me_: \web\output@WebInfo :: \web\output@getInfo(args.get())
		var handle: \web\output@WebInfo :: search(members, "handle")
		do codes.add("return \{me_.id}.\{handle.id}.F.charCodeAt(\{me_.id}.\{handle.id}.I++);\n")
	case "file_readerSetPos"
		do args.head()
		var me_: \web\output@WebInfo :: \web\output@getInfo(args.get())
		do args.next()
		var origin: \web\output@WebInfo :: \web\output@getInfo(args.get())
		do args.next()
		var pos: \web\output@WebInfo :: \web\output@getInfo(args.get())
		var handle: \web\output@WebInfo :: search(members, "handle")
		do codes.add("\{me_.id}.\{handle.id}.I=\{pos.id};\n")
	case "file_readerTerm"
		do args.head()
		var me_: \web\output@WebInfo :: \web\output@getInfo(args.get())
		var handle: \web\output@WebInfo :: search(members, "handle")
		do codes.add("return \{me_.id}.\{handle.id}.I>=\{me_.id}.\{handle.id}.F.length;\n")
	case "file_writerFin"
		do args.head()
		var me_: \web\output@WebInfo :: \web\output@getInfo(args.get())
		var handle: \web\output@WebInfo :: search(members, "handle")
		do codes.add("let d_=\{me_.id}.\{handle.id}.F.replace(/\\n/g, \"\\u000D\\n\");\n")
		do codes.add("if(O_&&O_.writeFile){O_.writeFile(\{me_.id}.\{handle.id}.P,d_);return;}\n")
		do codes.add("let b_=new Blob([d_]);\n")
		do codes.add("let l_=document.createElement(\"a\");\n")
		do codes.add("l_.download=\{me_.id}.\{handle.id}.P;\n")
		do codes.add("l_.href=(URL||webkitURL).createObjectURL(b_);\n")
		do codes.add("l_.setAttribute(\"style\",\"display:none\");\n")
		do codes.add("document.body.appendChild(l_);\n")
		do codes.add("l_.click();\n")
		do codes.add("document.body.removeChild(l_);\n")
		do codes.add("\{me_.id}.\{handle.id}.F=null;\n")
	case "file_writerGetPos"
		do args.head()
		var me_: \web\output@WebInfo :: \web\output@getInfo(args.get())
		var handle: \web\output@WebInfo :: search(members, "handle")
		do codes.add("return \{me_.id}.\{handle.id}.I;\n")
	case "file_writerSetPos"
		do args.head()
		var me_: \web\output@WebInfo :: \web\output@getInfo(args.get())
		do args.next()
		var origin: \web\output@WebInfo :: \web\output@getInfo(args.get())
		do args.next()
		var pos: \web\output@WebInfo :: \web\output@getInfo(args.get())
		var handle: \web\output@WebInfo :: search(members, "handle")
		do codes.add("\{me_.id}.\{handle.id}.I=\{pos.id};\n")
	case "file_writerWrite"
		do args.head()
		var me_: \web\output@WebInfo :: \web\output@getInfo(args.get())
		do args.next()
		var n: \web\output@WebInfo :: \web\output@getInfo(args.get())
		var handle: \web\output@WebInfo :: search(members, "handle")
		; TODO:
	case "file_writerWriteChar"
		do args.head()
		var me_: \web\output@WebInfo :: \web\output@getInfo(args.get())
		do args.next()
		var n: \web\output@WebInfo :: \web\output@getInfo(args.get())
		var handle: \web\output@WebInfo :: search(members, "handle")
		do codes.add("if(\{me_.id}.\{handle.id}.I<\{me_.id}.\{handle.id}.F.length)\n")
		do codes.add("\{me_.id}.\{handle.id}.F=\{me_.id}.\{handle.id}.F.slice(0,\{me_.id}.\{handle.id}.I)+String.fromCharCode(\{n.id})+\{me_.id}.\{handle.id}.F.slice(\{me_.id}.\{handle.id}.I+1);\n")
		do codes.add("else{\n")
		do codes.add("\{me_.id}.\{handle.id}.F+=String.fromCharCode(\{n.id});\n")
		do codes.add("}\n")
		do codes.add("\{me_.id}.\{handle.id}.I++;\n")
	case "wnd_editBaseGetText"
		do args.head()
		var me_: \web\output@WebInfo :: \web\output@getInfo(args.get())
		var handle: \web\output@WebInfo :: search(members, "handle")
		do codes.add("return \{me_.id}.\{handle.id}.H.value;\n")
	case "wnd_makeEditMulti"
		do args.head()
		var me_: \web\output@WebInfo :: \web\output@getInfo(args.get())
		do args.next()
		var parent: \web\output@WebInfo :: \web\output@getInfo(args.get())
		do args.next()
		var x: \web\output@WebInfo :: \web\output@getInfo(args.get())
		do args.next()
		var y: \web\output@WebInfo :: \web\output@getInfo(args.get())
		do args.next()
		var width: \web\output@WebInfo :: \web\output@getInfo(args.get())
		do args.next()
		var height: \web\output@WebInfo :: \web\output@getInfo(args.get())
		do args.next()
		var anchorX: \web\output@WebInfo :: \web\output@getInfo(args.get())
		do args.next()
		var anchorY: \web\output@WebInfo :: \web\output@getInfo(args.get())
		var handle: \web\output@WebInfo :: search(members, "handle")
		do codes.add("let h_=document.createElement(\"textarea\");\n")
		do codes.add("h_.setAttribute(\"cols\",\"\{width.id}\");\n")
		do codes.add("h_.setAttribute(\"rows\",\"\{height.id}\");\n")
		do codes.add("document.body.appendChild(c_);\n")
		do codes.add("\{me_.id}.\{handle.id}={C:c_};\n")
		do codes.add("return \{me_.id};\n")
	case "toStrFmtFloat"
		; TODO:
	case "toStrFmtInt"
		; TODO:
	case "math_bellmanFord"
		; TODO:
	case "math_dijkstra"
		; TODO:
	case "math_gamma"
		; TODO:
	case "rndRaw"
		; TODO:
		do codes.add("return Math.floor(Math.random()*0x100000000);\n")
	default
		assert false
	end switch
	
	func search(members: list<\ast@AstClassItem>, name: []char): \web\output@WebInfo
		do members.head()
		while(!members.term())
			var def: \ast@Ast :: members.get().def
			if(def.typeId = %var_ & (def $ \ast@AstVar).arg.name <>& null & (def $ \ast@AstVar).arg.name = name)
				ret \web\output@getInfo((def $ \ast@AstVar).arg)
			end if
			do members.next()
		end while
		assert false
		ret null
	end func
end func
