var excptFunc1: []bit8
var excptFunc2: []bit8
var excptFuncHeader: []bit8

+func getExcptFunc(): list<@Asm>
	if(@excptFunc1 =& null)
		do @excptFunc1 :: [
		|0x8Bb8, 0x41b8, 0x04b8, {mov eax,dword ptr [rcx+4]}
		|0x4Db8, 0x8Bb8, 0x31b8, {mov r14,qword ptr [r9]}
		|0x4Db8, 0x8Bb8, 0x79b8, 0x08b8, {mov r15,qword ptr [r9+8]}
		|0x49b8, 0x8Bb8, 0x79b8, 0x38b8, {mov rdi,qword ptr [r9+38h]}
		|0x4Db8, 0x29b8, 0xFEb8, {sub r14,r15}
		|0x4Db8, 0x89b8, 0xCCb8, {mov r12,r9}
		|0x49b8, 0x89b8, 0xD5b8, {mov r13,rdx}
		|0x48b8, 0x89b8, 0xCDb8, {mov rbp,rcx}
		|0xA8b8, 0x66b8, {test al,66h}
		|0x0Fb8, 0x85b8, 0xC4b8, 0x00b8, 0x00b8, 0x00b8, {jne lbl5}
		|0x49b8, 0x63b8, 0x71b8, 0x48b8, {movsxd rsi,dword ptr [r9+48h]}
		|0x49b8, 0x89b8, 0x4Bb8, 0xC8b8, {mov qword ptr [r11-38h],rcx}
		|0x4Db8, 0x89b8, 0x43b8, 0xD0b8, {mov qword ptr [r11-30h],r8}
		|0x48b8, 0x89b8, 0xF0b8, {mov rax,rsi}
		|0x3Bb8, 0x37b8, {cmp esi,dword ptr [rdi]}
		|0x0Fb8, 0x83b8, 0x9Ab8, 0x01b8, 0x00b8, 0x00b8, {jae lbl5}
		|0x48b8, 0x01b8, 0xC0b8, {add rax,rax}
		|0x48b8, 0x8Db8, 0x5Cb8, 0xC7b8, 0x0Cb8, {lea rbx,[rdi+rax*8+0ch]}
		|{lbl1}
		|0x8Bb8, 0x43b8, 0xF8b8, {mov eax,dword ptr [rbx-8]}
		|0x49b8, 0x39b8, 0xC6b8, {cmp r14,rax}
		|0x0Fb8, 0x82b8, 0x7Fb8, 0x00b8, 0x00b8, 0x00b8, {jb lbl3}
		|0x8Bb8, 0x43b8, 0xFCb8, {mov eax,dword ptr[rbx-4]}
		|0x49b8, 0x39b8, 0xC6b8, {cmp r14,rax}
		|0x0Fb8, 0x83b8, 0x73b8, 0x00b8, 0x00b8, 0x00b8, {jae lbl3}
		|0x83b8, 0x7Bb8, 0x04b8, 0x00b8, {cmp dword ptr[rbx+4],0}
		|0x0Fb8, 0x84b8, 0x69b8, 0x00b8, 0x00b8, 0x00b8, {je lbl3}
		|0x83b8, 0x3Bb8, 0x01b8, {cmp dword ptr [rbx],1}
		|0x0Fb8, 0x84b8, 0x1Db8, 0x00b8, 0x00b8, 0x00b8, {je lbl2}
		|0x8Bb8, 0x03b8, {mov eax, dword ptr [rbx]}
		|0x48b8, 0x8Db8, 0x4Cb8, 0x24b8, 0x30b8, {lea rcx,[rsp+30h]}
		|0x4Cb8, 0x89b8, 0xEAb8, {mov rdx,r13}
		|0x4Cb8, 0x01b8, 0xF8b8, {add rax,r15}
		|0xFFb8, 0xD0b8, {call rax}
		|0x85b8, 0xC0b8, {test eax,eax}
		|0x0Fb8, 0x88b8, 0x5Cb8, 0x00b8, 0x00b8, 0x00b8, {js lbl4}
		|0x0Fb8, 0x8Eb8, 0x43b8, 0x00b8, 0x00b8, 0x00b8, {jle lbl3}
		|{lbl2}
		|0x8Bb8, 0x4Bb8, 0x04b8, {mov ecx,dword ptr [rbx+4]}
		|0x41b8, 0xB8b8, 0x01b8, 0x00b8, 0x00b8, 0x00b8, {mov r8d,1}
		|0x4Cb8, 0x89b8, 0xEAb8, {mov rdx,r13}
		|0x4Cb8, 0x01b8, 0xF9b8, {add rcx,r15}
		|0xE8b8, 0x5Ab8, 0x01b8, 0x00b8, 0x00b8, {call lbl17}
		|0x49b8, 0x8Bb8, 0x44b8, 0x24b8, 0x40b8, {mov rax,qword ptr [r12+40h]}
		|0x8Bb8, 0x53b8, 0x04b8, {mov edx,dword ptr [rbx+4]}
		|0x4Cb8, 0x63b8, 0x4Db8, 0x00b8, {movsxd r9,dword ptr [rbp]}
		|0x48b8, 0x89b8, 0x44b8, 0x24b8, 0x28b8, {mov qword ptr [rsp+28h],rax}
		|0x49b8, 0x8Bb8, 0x44b8, 0x24b8, 0x28b8, {mov rax,qword ptr [r12+28h]}
		|0x4Cb8, 0x01b8, 0xFAb8, {add rdx,r15}
		|0x49b8, 0x89b8, 0xE8b8, {mov r8,rbp}
		|0x4Cb8, 0x89b8, 0xE9b8, {mov rcx,r13}
		|0x48b8, 0x89b8, 0x44b8, 0x24b8, 0x20b8 {mov qword ptr [rsp+20h],rax}
		|]
	end if
	if(@excptFunc2 =& null)
		do @excptFunc2 :: [
		|0xE8b8, 0x46b8, 0x01b8, 0x00b8, 0x00b8, {call lbl18}
		|{lbl3}
		|0xFFb8, 0xC6b8, {inc esi}
		|0x48b8, 0x83b8, 0xC3b8, 0x10b8, {add rbx,10h}
		|0x3Bb8, 0x37b8, {cmp esi,dword ptr [rdi],}
		|0x0Fb8, 0x83b8, 0xF9b8, 0x00b8, 0x00b8, 0x00b8, {jae lbl15}
		|0xE9b8, 0x62b8, 0xFFb8, 0xFFb8, 0xFFb8, {jmp lbl1}
		|{lbl4}
		|0x31b8, 0xC0b8, {xor eax,eax}
		|0xE9b8, 0xF2b8, 0x00b8, 0x00b8, 0x00b8, {jmp lbl16}
		|{lbl5}
		|0x4Db8, 0x8Bb8, 0x41b8, 0x20b8, {mov r8,qword ptr [r9+20h]}
		|0x31b8, 0xEDb8, {xor ebp,ebp}
		|0x45b8, 0x31b8, 0xEDb8, {xor r13d,r13d}
		|0x4Db8, 0x29b8, 0xF8b8, {sub r8,r15}
		|0xA8b8, 0x20b8, {test al,20h}
		|0x0Fb8, 0x84b8, 0x55b8, 0x00b8, 0x00b8, 0x00b8, {je lbl10}
		|0x31b8, 0xD2b8, {xor edx,edx}
		|0x39b8, 0x17b8, {cmp dword ptr [rdi],edx}
		|0x0Fb8, 0x86b8, 0x4Bb8, 0x00b8, 0x00b8, 0x00b8, {jbe lbl10}
		|0x48b8, 0x8Db8, 0x4Fb8, 0x08b8, {lea rcx,[rdi+8]}
		|{lbl6}
		|0x8Bb8, 0x41b8, 0xFCb8, {mov eax,dword ptr [rcx-4]}
		|0x49b8, 0x39b8, 0xC0b8, {cmp r8,rax}
		|0x0Fb8, 0x82b8, 0x0Bb8, 0x00b8, 0x00b8, 0x00b8, {jb lbl7}
		|0x8Bb8, 0x01b8, {mov eax,dword ptr [rcx]}
		|0x49b8, 0x39b8, 0xC0b8, {cmp r8,rax}
		|0x0Fb8, 0x86b8, 0xF3b8, 0x00b8, 0x00b8, 0x00b8, {jbe lbl8}
		|{lbl7}
		|0xFFb8, 0xC2b8, {inc edx}
		|0x48b8, 0x83b8, 0xC1b8, 0x10b8, {add rcx,10h}
		|0x3Bb8, 0x17b8, {cmp edx,dword ptr [rdi]}
		|0x0Fb8, 0x83b8, 0x22b8, 0x00b8, 0x00b8, 0x00b8, {jae lbl10}
		|0xE9b8, 0xD6b8, 0xFFb8, 0xFFb8, 0xFFb8, {jmp lbl6}
		|{lbl8}
		|0x89b8, 0xD0b8, {mov eax,edx,}
		|0x48b8, 0x01b8, 0xC0b8, {add rax,rax}
		|0x8Bb8, 0x4Cb8, 0xC7b8, 0x10b8, {mov ecx,dword ptr [rdi+rax*8+10h]}
		|0x85b8, 0xC9b8, {test ecx,ecx}
		|0x0Fb8, 0x85b8, 0x09b8, 0x00b8, 0x00b8, 0x00b8, {jne lbl9}
		|0x8Bb8, 0x6Cb8, 0xC7b8, 0x0Cb8, {mov ebp,dword ptr [rdi+rax*8+0ch]}
		|0xE9b8, 0x03b8, 0x00b8, 0x00b8, 0x00b8, {jmp lbl10}
		|{lbl9}
		|0x41b8, 0x89b8, 0xCDb8, {mov r13d,ecx}
		|{lbl10}
		|0x49b8, 0x63b8, 0x71b8, 0x48b8, {movsxd rsi,dword ptr [r9+48h]}
		|0x48b8, 0x89b8, 0xF3b8, {mov rbx,rsi}
		|0x3Bb8, 0x37b8, {cmp esi,dword ptr [rdi]}
		|0x0Fb8, 0x83b8, 0x75b8, 0x00b8, 0x00b8, 0x00b8, {jae lbl15}
		|0x48b8, 0xFFb8, 0xC3b8, {inc rbx}
		|0x48b8, 0xC1b8, 0xE3b8, 0x04b8, {shl rbx,4}
		|0x48b8, 0x01b8, 0xFBb8, {add rbx,rdi}
		|{lbl11}
		|0x8Bb8, 0x43b8, 0xF4b8, {mov eax,dword ptr [rbx-0ch]}
		|0x49b8, 0x39b8, 0xC6b8, {cmp r14,rax}
		|0x0Fb8, 0x82b8, 0x51b8, 0x00b8, 0x00b8, 0x00b8, {jb lbl14}
		|0x8Bb8, 0x43b8, 0xF8b8, {mov eax,dword ptr [rbx-8]}
		|0x49b8, 0x39b8, 0xC6b8, {cmp r14,rax}
		|0x0Fb8, 0x83b8, 0x45b8, 0x00b8, 0x00b8, 0x00b8, {jae lbl14}
		|0x45b8, 0x85b8, 0xEDb8, {test r13d,r13d}
		|0x0Fb8, 0x84b8, 0x09b8, 0x00b8, 0x00b8, 0x00b8, {je lbl12}
		|0x44b8, 0x3Bb8, 0x2Bb8, {cmp r13d,dword ptr[rbx]}
		|0x0Fb8, 0x84b8, 0x41b8, 0x00b8, 0x00b8, 0x00b8, {je lbl15}
		|{lbl12}
		|0x85b8, 0xEDb8, {test ebp, ebp}
		|0x0Fb8, 0x84b8, 0x09b8, 0x00b8, 0x00b8, 0x00b8, {je lbl13}
		|0x3Bb8, 0x6Bb8, 0xFCb8, {cmp ebp,dword ptr [rbx-4]}
		|0x0Fb8, 0x84b8, 0x30b8, 0x00b8, 0x00b8, 0x00b8, {je lbl15}
		|{lbl13}
		|0x83b8, 0x3Bb8, 0x00b8, {cmp dword ptr [rbx],0}
		|0x0Fb8, 0x85b8, 0x19b8, 0x00b8, 0x00b8, 0x00b8, {jne lbl14}
		|0x48b8, 0x8Bb8, 0x54b8, 0x24b8, 0x78b8, {mov rdx,qword ptr [rsp+78h]}
		|0x8Db8, 0x46b8, 0x01b8, {lea eax,[rsi+1]}
		|0xB1b8, 0x01b8, {mov cl,1}
		|0x41b8, 0x89b8, 0x44b8, 0x24b8, 0x48b8, {mov dword ptr [r12+48h],eax}
		|0x44b8, 0x8Bb8, 0x43b8, 0xFCb8, {mov r8d,dword ptr [rbx-4]}
		|0x4Db8, 0x01b8, 0xF8b8, {add r8,r15}
		|0x41b8, 0xFFb8, 0xD0b8, {call r8}
		|{lbl14}
		|0xFFb8, 0xC6b8, {inc esi}
		|0x48b8, 0x83b8, 0xC3b8, 0x10b8, {add rbx,10h}
		|0x3Bb8, 0x37b8, {cmp esi,dword ptr [rdi]}
		|0x0Fb8, 0x82b8, 0x95b8, 0xFFb8, 0xFFb8, 0xFFb8, {jb lbl11}
		|{lbl15}
		|0xB8b8, 0x01b8, 0x00b8, 0x00b8, 0x00b8, {mov eax,1}
		|{lbl16}
		|0x4Cb8, 0x8Db8, 0x5Cb8, 0x24b8, 0x40b8, {lea r11,[rsp+40h]}
		|0x49b8, 0x8Bb8, 0x5Bb8, 0x30b8, {mov rbx,qword ptr [r11+30h]}
		|0x49b8, 0x8Bb8, 0x6Bb8, 0x40b8, {mov rbp,qword ptr [r11+40h]}
		|0x49b8, 0x8Bb8, 0x73b8, 0x48b8, {mov rsi,qword ptr [r11+48h]}
		|0x4Cb8, 0x89b8, 0xDCb8, {mov rsp,r11}
		|0x41b8, 0x5Fb8, {pop r15}
		|0x41b8, 0x5Eb8, {pop r14}
		|0x41b8, 0x5Db8, {pop r13}
		|0x41b8, 0x5Cb8, {pop r12}
		|0x5Fb8, {pop rdi}
		|0xC3b8, {ret}
		|0xCCb8, {int 3}
		|{lbl17}
		|0x48b8, 0x89b8, 0x4Cb8, 0x24b8, 0x08b8, {mov qword ptr [rsp+8],rcx}
		|0x44b8, 0x89b8, 0x44b8, 0x24b8, 0x10b8, {mov dword ptr [rsp+10h],r8d}
		|0x48b8, 0x89b8, 0x54b8, 0x24b8, 0x18b8, {mov qword ptr [rsp+18h],rdx}
		|0x49b8, 0xB9b8, 0x20b8, 0x05b8, 0x93b8, 0x19b8, 0x00b8, 0x00b8, 0x00b8, 0x00b8, {r9, 19930520h}
		|0xC3b8, {ret}
		|0xCCb8, {int 3}
		|{lbl18}
		|0xC3b8 {ret}
		|]
	end if
	var asms: list<@Asm> :: #list<@Asm>
	block
		var asm: @AsmMachine :: @asmMachine(@excptFunc1)
		do asms.add(asm)
	end block
	do @callApi(asms, "KERNEL32.dll", "RtlUnwindEx")
	block
		var asm: @AsmMachine :: @asmMachine(@excptFunc2)
		do asms.add(asm)
	end block
	ret asms
end func

+func getExcptFuncHeader(): list<@Asm>
	if(@excptFuncHeader =& null)
		do @excptFuncHeader :: [
		|0x49b8, 0x89b8, 0xE3b8, {mov r11b8,rsp}
		|0x49b8, 0x89b8, 0x5Bb8, 0x08b8, {mov qword ptr [r11+8]b8,rbx}
		|0x49b8, 0x89b8, 0x53b8, 0x10b8, {mov qword ptr [r11+10h]b8,rdx}
		|0x49b8, 0x89b8, 0x6Bb8, 0x18b8, {mov qword ptr [r11+18h]b8,rbp}
		|0x49b8, 0x89b8, 0x73b8, 0x20b8, {mov qword ptr [r11+20h]b8,rsi}
		|0x57b8, {push rdi}
		|0x41b8, 0x54b8, {push r12}
		|0x41b8, 0x55b8, {push r13}
		|0x41b8, 0x56b8, {push r14}
		|0x41b8, 0x57b8, {push r15}
		|0x48b8, 0x83b8, 0xECb8, 0x40b8 {sub rspb8,40h}
		|]
	end if
	var asms: list<@Asm> :: #list<@Asm>
	var asm: @AsmMachine :: @asmMachine(@excptFuncHeader)
	do asms.add(asm)
	ret asms
end func
