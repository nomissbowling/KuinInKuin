+class Cmd()
	+func cmd()
	end func
end class

+class Undo()
	*func[__ndc]ctor()
	end func
	
	+func _init(undoBufSize: int)
		do me.undoBuf :: #[undoBufSize]@Cmd
		do me.redoBuf :: #[undoBufSize]@Cmd
		do me.bufPtr :: 0
		do me.state :: 0
	end func
	
	+func add(undo: @Cmd, redo: @Cmd)
		if(dbg & me.state = 0)
			throw 0xE917000A
		end if
		do me.bufPtr :: me.bufPtrNext(me.bufPtr)
		do me.undoBuf[me.bufPtr] :: undo
		do me.redoBuf[me.bufPtr] :: redo
		do me.state :: 2
	end func
	
	+func recordBegin()
		if(dbg & me.state <> 0)
			throw 0xE917000A
		end if
		do me.state :: 1
	end func
	
	+func recordEnd()
		if(dbg & me.state = 0)
			throw 0xE917000A
		end if
		if(me.state = 2)
			do me.bufPtr :: me.bufPtrNext(me.bufPtr)
			var next: int :: me.bufPtrNext(me.bufPtr)
			do me.undoBuf[me.bufPtr] :: null
			do me.undoBuf[next] :: null
			do me.redoBuf[me.bufPtr] :: null
			do me.redoBuf[next] :: null
		end if
		do me.state :: 0
	end func
	
	+func recording(): bool
		ret me.state <> 0
	end func
	
	+func redo()
		if(dbg & me.state <> 0)
			throw 0xE917000A
		end if
		if(me.redoBuf[me.bufPtrNext(me.bufPtr)] =& null)
			ret
		end if
		while(true)
			do me.bufPtr :: me.bufPtrNext(me.bufPtr)
			if(me.redoBuf[me.bufPtr] =& null)
				ret
			end if
			do me.redoBuf[me.bufPtr].cmd()
		end while
	end func
	
	+func undo()
		if(dbg & me.state <> 0)
			throw 0xE917000A
		end if
		if(me.undoBuf[me.bufPtrPrev(me.bufPtr)] =& null)
			ret
		end if
		while(true)
			do me.bufPtr :: me.bufPtrPrev(me.bufPtr)
			if(me.undoBuf[me.bufPtr] =& null)
				ret
			end if
			do me.undoBuf[me.bufPtr].cmd()
		end while
	end func
	
	func bufPtrPrev(ptr: int): int
		ret ptr = 0 ?(^me.undoBuf - 1, ptr - 1)
	end func
	
	func bufPtrNext(ptr: int): int
		ret ptr = ^me.undoBuf - 1 ?(0, ptr + 1)
	end func
	
	var undoBuf: []@Cmd
	var redoBuf: []@Cmd
	var bufPtr: int
	var state: int
end class

+func makeUndo(undoBufSize: int): @Undo
	var r: @Undo :: #@Undo
	do r._init(undoBufSize)
	ret r
end func
