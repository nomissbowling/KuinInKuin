func _init()
	do wnd@addAction(@_update)
	do @bgmVolume :: 1.0
end func

func _update()
	switch(@mode)
	case %fadeOut
		do @cnt :+ 1
		do @frontSnd.volume((1.0 - @cnt $ float / @fadeTime $ float) * @bgmVolume)
		if(@cnt = @fadeTime)
			if(@backSnd =& null)
				do @stop()
			else
				do @frontSnd :: @backSnd
				do @backSnd :: null
				do @frontSnd.volume(@bgmVolume)
				do @frontSnd.setPos(@fadeStartPos)
				do @frontSnd.playLoop()
				do @mode :: %play
				do @cnt :: 0
			end if
		end if
	case %cross
		do @cnt :+ 1
		do @frontSnd.volume((1.0 - @cnt $ float / @fadeTime $ float) * @bgmVolume)
		do @backSnd.volume((@cnt $ float / @fadeTime $ float) * @bgmVolume)
		if(@cnt = @fadeTime)
			do @frontSnd :: @backSnd
			do @backSnd :: null
			do @frontSnd.volume(@bgmVolume)
			do @mode :: %play
			do @cnt :: 0
		end if
	end switch
end func

enum Mode
	stop
	play
	fadeOut
	cross
end enum

var frontSnd: snd@Snd
var backSnd: snd@Snd
var mode: @Mode
var path: []char
var cnt: int
var fadeStartPos: float
var fadeTime: int
var bgmVolume: float

+func play(path: []char, startPos: float): float
	if(@path <>& null & path = @path)
		ret 0.0
	end if
	var result: float :: @stop()
	do @frontSnd :: snd@makeSnd(path)
	do @frontSnd.volume(@bgmVolume)
	do @frontSnd.setPos(startPos)
	do @frontSnd.playLoop()
	do @mode :: %play
	do @cnt :: 0
	do @path :: path
	ret result
end func

+func playCross(path: []char, startPos: float, fadeTime: int): float
	if(dbg)
		if(fadeTime < 1)
			throw 0xE9170006
		end if
	end if
	if(@path <>& null & path = @path)
		ret 0.0
	end if
	do @backToFront()
	if(@frontSnd =& null)
		do @play(path, startPos)
	end if
	do @backSnd :: snd@makeSnd(path)
	do @backSnd.volume(0.0)
	do @backSnd.setPos(startPos)
	do @backSnd.playLoop()
	do @frontSnd.volume(@bgmVolume)
	do @mode :: %cross
	do @cnt :: 0
	do @fadeTime :: fadeTime
	do @path :: path
	ret @frontSnd.getPos()
end func

+func playFade(path: []char, startPos: float, fadeTime: int): float
	if(dbg)
		if(fadeTime < 1)
			throw 0xE9170006
		end if
	end if
	if(@path <>& null & path = @path)
		ret 0.0
	end if
	do @backToFront()
	if(@frontSnd =& null)
		do @play(path, startPos)
	end if
	do @backSnd :: snd@makeSnd(path)
	do @frontSnd.volume(@bgmVolume)
	do @mode :: %fadeOut
	do @cnt :: 0
	do @fadeStartPos :: startPos
	do @fadeTime :: fadeTime
	do @path :: path
	ret @frontSnd.getPos()
end func

+func stop(): float
	do @path :: null
	var result: float :: 0.0
	if(@frontSnd <>& null)
		do result :: @frontSnd.getPos()
		do @frontSnd :: null
	end if
	do @backSnd :: null
	do @mode :: %stop
	do @cnt :: 0
	ret result
end func

+func stopFade(fadeTime: int): float
	if(dbg)
		if(fadeTime < 1)
			throw 0xE9170006
		end if
	end if
	if(@mode = %fadeOut & @backSnd =& null)
		ret 0.0
	end if
	do @backToFront()
	do @path :: null
	do @fadeTime :: fadeTime
	if(@frontSnd =& null)
		do @mode :: %stop
		do @cnt :: 0
		ret 0.0
	end if
	do @frontSnd.volume(@bgmVolume)
	do @mode :: %fadeOut
	ret @frontSnd.getPos()
end func

+func volume(value: float)
	if(dbg)
		if(value < 0.0 | 1.0 < value)
			throw 0xE9170006
		end if
	end if
	if(@bgmVolume <> value)
		do @bgmVolume :: value
		if(@mode = %play & @frontSnd <>& null)
			do @frontSnd.volume(@bgmVolume)
		end if
	end if
end func

func backToFront()
	if(@backSnd <>& null)
		do @frontSnd :: @backSnd
		do @backSnd :: null
	end if
end func
