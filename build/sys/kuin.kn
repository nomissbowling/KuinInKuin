+class Class()
	func ctor()
	end func

	func _dtor()
	end func

	+func cmp(t: @Class): int
		throw 0xE9170004
	end func

	func _copy(): @Class
	end func

	func _toBin(): []bit8
	end func

	func _fromBin(bin: []bit8, idx: &int): @Class
	end func

	+func toStr(): []char
		ret ""
	end func
end class

func [d0000.knd, _init] _init()
end func

func [d0000.knd] _fin()
end func

func [d0000.knd] _err(excpt: int)
end func

func _initVars()
end func

func _finVars()
end func

func [d0000.knd, _any_type] _toStr(me_: []bit8, type: int): []char
end func

func [d0000.knd] _toStrFmtInt(me_: int, fmt: []char): []char
end func

func [d0000.knd] _toStrFmtFloat(me_: float, fmt: []char): []char
end func

func [d0000.knd] _absInt(me_: int): int
end func

func [d0000.knd] _absFloat(me_: float): float
end func

func [d0000.knd] _signInt(me_: int): int
end func

func [d0000.knd] _signFloat(me_: float): float
end func

func [d0000.knd] _clampInt(me_: int, min: int, max: int): int
end func

func [d0000.knd] _clampFloat(me_: float, min: float, max: float): float
end func

func [d0000.knd] _clampMinInt(me_: int, min: int): int
end func

func [d0000.knd] _clampMinFloat(me_: float, min: float): float
end func

func [d0000.knd] _clampMaxInt(me_: int, max: int): int
end func

func [d0000.knd] _clampMaxFloat(me_: float, max: float): float
end func

func [d0000.knd] _offset(me_: char, n: int): char
end func

func [d0000.knd, _any_type, _take_me, _ret_me] _or(me_: []bit8, type: int, n: []bit8): int
end func

func [d0000.knd, _any_type, _take_me, _ret_me] _and(me_: []bit8, type: int, n: []bit8): int
end func

func [d0000.knd, _any_type, _take_me, _ret_me] _xor(me_: []bit8, type: int, n: []bit8): int
end func

func [d0000.knd, _any_type, _ret_me] _not(me_: []bit8, type: int): int
end func

func [d0000.knd, _any_type, _ret_me] _shl(me_: []bit8, type: int, n: int): int
end func

func [d0000.knd, _any_type, _ret_me] _shr(me_: []bit8, type: int, n: int): int
end func

func [d0000.knd, _any_type, _ret_me] _sar(me_: []bit8, type: int, n: int): int
end func

func [d0000.knd, _any_type, _ret_me] _endian(me_: []bit8, type: int): int
end func

func [d0000.knd, _any_type, _ret_me] _sub(me_: []bit8, type: int, start: int, len: int): int
end func

func [d0000.knd, _any_type] _reverse(me_: []bit8, type: int)
end func

func [d0000.knd, _any_type] _shuffle(me_: []bit8, type: int)
end func

func [d0000.knd, _any_type] _sortArray(me_: []bit8, type: int)
end func

func [d0000.knd, _any_type] _sortDescArray(me_: []bit8, type: int)
end func

func [d0000.knd, _any_type] _sortList(me_: []bit8, type: int)
end func

func [d0000.knd, _any_type] _sortDescList(me_: []bit8, type: int)
end func

func [d0000.knd, _any_type, _take_child] _findArray(me_: []bit8, type: int, item: []bit8, start: int): int
end func

func [d0000.knd, _any_type, _take_child] _findList(me_: []bit8, type: int, item: []bit8): bool
end func

func [d0000.knd, _any_type, _take_child] _findLastArray(me_: []bit8, type: int, item: []bit8, start: int): int
end func

func [d0000.knd, _any_type, _take_child] _findLastList(me_: []bit8, type: int, item: []bit8): bool
end func

func [d0000.knd, _any_type, _take_child] _findBin(me_: []bit8, type: int, item: []bit8): int
end func

func [d0000.knd, _any_type, _take_child] _fill(me_: []bit8, type: int, value: []bit8)
end func

func [d0000.knd, _any_type, _ret_child] _min(me_: []bit8, type: int): int
end func

func [d0000.knd, _any_type, _ret_child] _max(me_: []bit8, type: int): int
end func

func [d0000.knd, _any_type, _ret_me] _repeat(me_: []bit8, type: int, len: int): int
end func

func [d0000.knd] _toInt(me_: []char, success: &bool): int
end func

func [d0000.knd] _toFloat(me_: []char, success: &bool): float
end func

func [d0000.knd] _toBit64(me_: []char, success: &bool): bit64
end func

func [d0000.knd] _lower(me_: []char): []char
end func

func [d0000.knd] _upper(me_: []char): []char
end func

func [d0000.knd] _trim(me_: []char): []char
end func

func [d0000.knd] _trimLeft(me_: []char): []char
end func

func [d0000.knd] _trimRight(me_: []char): []char
end func

func [d0000.knd] _split(me_: []char, delimiter: []char): [][]char
end func

func [d0000.knd] _join(me_: [][]char, delimiter: []char): []char
end func

func [d0000.knd] _replace(me_: []char, old: []char, new: []char): []char
end func

func [d0000.knd] _findStr(me_: []char, pattern: []char, start: int): int
end func

func [d0000.knd] _findStrLast(me_: []char, pattern: []char, start: int): int
end func

func [d0000.knd] _findStrEx(me_: []char, pattern: []char, start: int, fromLast: bool, ignoreCase: bool, wholeWord: bool): int
end func

func [d0000.knd, _any_type, _take_child] _addList(me_: []bit8, type: int, item: []bit8)
end func

func [d0000.knd, _any_type, _take_child] _addStack(me_: []bit8, type: int, item: []bit8)
end func

func [d0000.knd, _any_type, _take_child] _addQueue(me_: []bit8, type: int, item: []bit8)
end func

func [d0000.knd, _any_type, _take_key_value] _addDict(me_: []bit8, type: int, itemType: int, key: []bit8, item: []bit8)
end func

func [d0000.knd, _any_type, _ret_child] _getList(me_: []bit8, type: int): int
end func

func [d0000.knd, _any_type, _ret_child] _getStack(me_: []bit8, type: int): int
end func

func [d0000.knd, _any_type, _ret_child] _getQueue(me_: []bit8, type: int): int
end func

func [d0000.knd, _any_type, _take_child, _ret_child] _getDict(me_: []bit8, type: int, key: []bit8, existed: &bool): int
end func

func [d0000.knd, _any_type, _ret_child] _getOffset(me_: []bit8, type: int, offset: int): int
end func

func [d0000.knd, _any_type] _head(me_: []bit8, type: int)
end func

func [d0000.knd, _any_type] _moveOffset(me_: []bit8, type: int, offset: int)
end func

func [d0000.knd, _any_type] _tail(me_: []bit8, type: int)
end func

func [d0000.knd, _any_type] _next(me_: []bit8, type: int)
end func

func [d0000.knd, _any_type] _prev(me_: []bit8, type: int)
end func

func [d0000.knd, _any_type] _term(me_: []bit8, type: int): bool
end func

func [d0000.knd, _any_type] _termOffset(me_: []bit8, type: int, offset: int): bool
end func

func [d0000.knd, _any_type] _del(me_: []bit8, type: int)
end func

func [d0000.knd, _any_type] _delNext(me_: []bit8, type: int)
end func

func [d0000.knd, _any_type, _take_child] _ins(me_: []bit8, type: int, item: []bit8)
end func

func [d0000.knd, _any_type, _ret_array_of_list_child] _toArray(me_: []bit8, type: int): int
end func

func [d0000.knd, _any_type, _ret_array_of_dict_key] _toArrayKey(me_: []bit8, type: int): int
end func

func [d0000.knd, _any_type, _ret_array_of_dict_value] _toArrayValue(me_: []bit8, type: int): int
end func

func [d0000.knd, _any_type, _ret_child] _peek(me_: []bit8, type: int): int
end func

func [d0000.knd, _any_type, _take_child] _exist(me_: []bit8, type: int, key: []bit8): bool
end func

func [d0000.knd, _any_type, _take_key_value_func] _forEach(me_: []bit8, type: int, callback: int, data: @Class): bool
end func

func [d0000.knd, _any_type, _take_child] _delDict(me_: []bit8, type: int, key: []bit8)
end func

func [d0000.knd, _any_type] _idx(me_: []bit8, type: int): int
end func

+class ListPtr()
	var ptr: int
end class

func [d0000.knd, _any_type, _make_instance] _getPtr(me_: []bit8, type: int, me2: @ListPtr): @ListPtr
end func

func [d0000.knd, _any_type] _setPtr(me_: []bit8, type: int, ptr: @ListPtr)
end func
