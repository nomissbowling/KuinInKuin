+const pi: float :: 3.14159265358979323846
+const e: float :: 2.71828182845904523536
+const intMin: int :: -9223372036854775807 - 1
+const intMax: int :: 9223372036854775807

+func [d0000.knd, _cmdLine] cmdLine(): [][]char
end func

+func [_exit_code] exitCode(code: int)
	if(dbg)
		if(code < 0 | 0xFFFFFFFF < code)
			throw 0xE9170006
		end if
	end if
end func

+class Rnd()
	*func [d0000.knd, _rndDtor, _force] _dtor()
	end func

	+func [d0000.knd, _rndRnd] rnd(min: int, max: int): int
	end func

	+func [d0000.knd, _rndRndFloat] rndFloat(min: float, max: float): float
	end func

	+func [d0000.knd, _rndRndBit64] rndBit64(): bit64
	end func

	var rndState: int
end class

+func [d0000.knd, _makeRnd, _make_instance] makeRnd(me2: @Rnd, seed: int): @Rnd
end func

+func [d0000.knd, _rnd] rnd(min: int, max: int): int
end func

+func [d0000.knd, _rndFloat] rndFloat(min: float, max: float): float
end func

+func [d0000.knd, _rndBit64] rndBit64(): bit64
end func

+func [d0000.knd, _rndUuid] rndUuid(): []char
end func

+func [d0000.knd, _cos] cos(x: float): float
end func

+func [d0000.knd, _sin] sin(x: float): float
end func

+func [d0000.knd, _tan] tan(x: float): float
end func

+func [d0000.knd, _acos] acos(x: float): float
end func

+func [d0000.knd, _asin] asin(x: float): float
end func

+func [d0000.knd, _atan] atan(x: float): float
end func

+func [d0000.knd, _cosh] cosh(x: float): float
end func

+func [d0000.knd, _sinh] sinh(x: float): float
end func

+func [d0000.knd, _tanh] tanh(x: float): float
end func

+func [d0000.knd, _acosh] acosh(x: float): float
end func

+func [d0000.knd, _asinh] asinh(x: float): float
end func

+func [d0000.knd, _atanh] atanh(x: float): float
end func

+func [d0000.knd, _sqrt] sqrt(x: float): float
end func

+func [d0000.knd, _exp] exp(x: float): float
end func

+func [d0000.knd, _ln] ln(x: float): float
end func

+func [d0000.knd, _log] log(base: float, x: float): float
end func

+func [d0000.knd, _floor] floor(x: float): float
end func

+func [d0000.knd, _ceil] ceil(x: float): float
end func

+func [d0000.knd, _round] round(x: float, precision: int): float
end func

+func [d0000.knd, _rot] rot(x: &float, y: &float, centerX: float, centerY: float, angle: float)
end func

+func [d0000.knd, _invRot] invRot(x: float, y: float, centerX: float, centerY: float): float
end func

+func [d0000.knd, _dist] dist(x: float, y: float, centerX: float, centerY: float): float
end func

+func [d0000.knd, _chase] chase(x: &float, target: float, vel: float): bool
end func

+func [d0000.knd, _same] same(n1: float, n2: float): bool
end func

+func [d0000.knd, _toBit64Forcibly] toBit64Forcibly(x: float): bit64
end func

+func [d0000.knd, _toFloatForcibly] toFloatForcibly(x: bit64): float
end func

+func [d0000.knd, _toRad] toRad(degree: float): float
end func

+func [d0000.knd, _toDegree] toDegree(rad: float): float
end func

+func [d0000.knd, _cmp] cmp(s1: []char, s2: []char): int
end func

+func [d0000.knd, _cmpEx] cmpEx(s1: []char, s2: []char, len: int, ignoreCase: bool): int
end func

+func [d0000.knd, _minInt] min(n1: int, n2: int): int
end func

+func [d0000.knd, _minFloat] minFloat(n1: float, n2: float): float
end func

+func [d0000.knd, _maxInt] max(n1: int, n2: int): int
end func

+func [d0000.knd, _maxFloat] maxFloat(n1: float, n2: float): float
end func

+func [d0000.knd, _levenshtein] levenshtein(s1: []char, s2: []char): int
end func

+func [d0000.knd, _lerp] lerp(first: float, last: float, rate: float): float
end func

+func [d0000.knd, _qerp] qerp(first: float, last: float, easeIn: bool, rate: float): float
end func

+func [d0000.knd, _cerp] cerp(first: float, last: float, rate: float): float
end func

+func [d0000.knd, _hermite] hermite(pos: []float, rate: float): float
end func

+class BmSearch()
	*func [d0000.knd, _bmSearchDtor, _force] _dtor()
	end func

	+func [d0000.knd, _bmSearchFind] find(text: []char, start: int): int
	end func

	var pattern: int
	var dists: int
	var len: int
end class

+func [d0000.knd, _makeBmSearch, _make_instance] makeBmSearch(me2: @BmSearch, pattern: []char): @BmSearch
end func

+func [d0000.knd, _hash] hash(data: []bit8): []bit8
end func

+func [d0000.knd, _encrypt] encrypt(data: []bit8, key: []bit8): []bit8
end func

+func [d0000.knd, _decrypt] decrypt(data: []bit8, key: []bit8): []bit8
end func

+func [d0000.knd, _sysTime] sysTime(): int
end func

+func [d0000.knd, _now] now(): int
end func

+func [d0000.knd, _intToDate] intToDate(time: int, year: &int, month: &int, day: &int, hour: &int, minute: &int, second: &int): int
end func

+func [d0000.knd, _dateToInt] dateToInt(year: int, month: int, day: int, hour: int, minute: int, second: int): int
end func

+func [d0000.knd, _intToLocalDate] intToLocalDate(time: int, year: &int, month: &int, day: &int, hour: &int, minute: &int, second: &int): int
end func

+func [d0000.knd, _localDateToInt] localDateToInt(year: int, month: int, day: int, hour: int, minute: int, second: int): int
end func

+func [d0000.knd] sleep(ms: int)
end func

+func [d0000.knd, _countUp] countUp(min: int, max: int): []int
end func

+func [d0000.knd, _addChkOverflow] addChkOverflow(overflowed: &bool, n1: int, n2: int): int
end func

+func [d0000.knd, _subChkOverflow] subChkOverflow(overflowed: &bool, n1: int, n2: int): int
end func

+func [d0000.knd, _mulChkOverflow] mulChkOverflow(overflowed: &bool, n1: int, n2: int): int
end func

+func [d0000.knd, _addr] addr(class_: kuin@Class): bit64
end func

+class Int()
	+*func cmp(t: @Int): int
		ret (me.value - t.value).sign()
	end func

	+*func toStr(): []char
		ret me.value.toStr()
	end func

	+var value: int
end class

+class Float()
	+*func cmp(t: @Float): int
		ret (me.value - t.value).sign() $ int
	end func

	+*func toStr(): []char
		ret me.value.toStr()
	end func

	+var value: float
end class

+class Bool()
	+*func cmp(t: @Bool): int
		ret (me.value $ int - t.value $ int).sign()
	end func

	+*func toStr(): []char
		ret me.value.toStr()
	end func

	+var value: bool
end class

+class Char()
	+*func cmp(t: @Char): int
		ret (me.value $ int - t.value $ int).sign()
	end func

	+*func toStr(): []char
		ret me.value.toStr()
	end func

	+var value: char
end class

+class Str()
	+*func cmp(t: @Str): int
		ret @cmp(me.value, t.value)
	end func

	+*func toStr(): []char
		ret me.value
	end func

	+var value: []char
end class
