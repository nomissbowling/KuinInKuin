var k: []bit32

+func sha256(data: []bit8): []bit8
	if(@k =& null)
		do @k :: [
		|0x428A2F98b32, 0x71374491b32, 0xB5C0FBCFb32, 0xE9B5DBA5b32, 0x3956C25Bb32, 0x59F111F1b32, 0x923F82A4b32, 0xAB1C5ED5b32,
		|0xD807AA98b32, 0x12835B01b32, 0x243185BEb32, 0x550C7DC3b32, 0x72BE5D74b32, 0x80DEB1FEb32, 0x9BDC06A7b32, 0xC19BF174b32,
		|0xE49B69C1b32, 0xEFBE4786b32, 0x0FC19DC6b32, 0x240CA1CCb32, 0x2DE92C6Fb32, 0x4A7484AAb32, 0x5CB0A9DCb32, 0x76F988DAb32,
		|0x983E5152b32, 0xA831C66Db32, 0xB00327C8b32, 0xBF597FC7b32, 0xC6E00BF3b32, 0xD5A79147b32, 0x06CA6351b32, 0x14292967b32,
		|0x27B70A85b32, 0x2E1B2138b32, 0x4D2C6DFCb32, 0x53380D13b32, 0x650A7354b32, 0x766A0ABBb32, 0x81C2C92Eb32, 0x92722C85b32,
		|0xA2BFE8A1b32, 0xA81A664Bb32, 0xC24B8B70b32, 0xC76C51A3b32, 0xD192E819b32, 0xD6990624b32, 0xF40E3585b32, 0x106AA070b32,
		|0x19A4C116b32, 0x1E376C08b32, 0x2748774Cb32, 0x34B0BCB5b32, 0x391C0CB3b32, 0x4ED8AA4Ab32, 0x5B9CCA4Fb32, 0x682E6FF3b32,
		|0x748F82EEb32, 0x78A5636Fb32, 0x84C87814b32, 0x8CC70208b32, 0x90BEFFFAb32, 0xA4506CEBb32, 0xBEF9A3F7b32, 0xC67178F2b32]
	end if
	var h: []bit32 :: [
	|0x6A09E667b32,
	|0xBB67AE85b32,
	|0x3C6EF372b32,
	|0xA54FF53Ab32,
	|0x510E527Fb32,
	|0x9B05688Cb32,
	|0x1F83D9ABb32,
	|0x5BE0CD19b32]
	var idx: int :: 0
	var d: []bit8 :: #[64]bit8
	while(^data - idx >= 64)
		do @hashBlock(h, data, idx)
		do idx :+ 64
	end while
	var paddingSize: int :: ^data - idx
	for i(0, paddingSize - 1)
		do d[i] :: data[idx + i]
	end for
	do d[paddingSize] :: 0x80b8
	if(paddingSize >= 56)
		do @hashBlock(h, d, 0)
		for i(0, 56 - 1)
			do d[i] :: 0b8
		end for
	end if
	block
		var size: bit64 :: (^data) $ bit64 * 8b64
		for i(0, 8 - 1)
			do d[56 + i] :: size.shr((7 - i) * 8) $ bit8
		end for
	end block
	do @hashBlock(h, d, 0)
	var r: []bit8 :: #[32]bit8
	for i(0, 7)
		do r[i * 4 + 0] :: h[i] $ bit8
		do r[i * 4 + 1] :: h[i].shr(8) $ bit8
		do r[i * 4 + 2] :: h[i].shr(16) $ bit8
		do r[i * 4 + 3] :: h[i].shr(24) $ bit8
	end for
	ret r
end func

+func hashBlock(h: []bit32, data: []bit8, idx: int)
	var sit: []bit32 :: #[64]bit32
	for i(0, 16 - 1)
		do sit[i] :: (data[idx + i * 4 + 3] $ bit32).or((data[idx + i * 4 + 2] $ bit32).shl(8)).or((data[idx + i * 4 + 1] $ bit32).shl(16)).or((data[idx + i * 4] $ bit32).shl(24))
	end for
	for i(16, 64 - 1)
		var sigma2: bit32 :: sit[i - 2].shr(17).or(sit[i - 2].shl(32 - 17)).xor(sit[i - 2].shr(19).or(sit[i - 2].shl(32 - 19))).xor(sit[i - 2].shr(10))
		var sigma1: bit32 :: sit[i - 15].shr(7).or(sit[i - 15].shl(32 - 7)).xor(sit[i - 15].shr(18).or(sit[i - 15].shl(32 - 18))).xor(sit[i - 15].shr(3))
		do sit[i] :: sigma2 + sit[i - 7] + sigma1 + sit[i - 16]
	end for
	var n: []bit32 :: #[8]bit32
	for i(0, 8 - 1)
		do n[i] :: h[i]
	end for
	for i(0, 64 - 1)
		var sum2: bit32 :: n[4].shr(6).or(n[4].shl(32 - 6)).xor(n[4].shr(11).or(n[4].shl(32 - 11))).xor(n[4].shr(25).or(n[4].shl(32 - 25)))
		var ch: bit32 :: n[4].and(n[5]).xor(n[4].not().and(n[6]))
		var sum1: bit32 :: n[0].shr(2).or(n[0].shl(32 - 2)).xor(n[0].shr(13).or(n[0].shl(32 - 13))).xor(n[0].shr(22).or(n[0].shl(32 - 22)))
		var maj: bit32 :: n[0].and(n[1]).xor(n[0].and(n[2])).xor(n[1].and(n[2]))
		var tmp1: bit32 :: n[7] + sum2 + ch + @k[i] + sit[i]
		var tmp2: bit32 :: sum1 + maj
		do n[7] :: n[6]
		do n[6] :: n[5]
		do n[5] :: n[4]
		do n[4] :: n[3] + tmp1
		do n[3] :: n[2]
		do n[2] :: n[1]
		do n[1] :: n[0]
		do n[0] :: tmp1 + tmp2
	end for
	for i(0, 8 - 1)
		do h[i] :+ n[i]
		do h[i] :: h[i].and(0xFFb32).shl(24).or(h[i].shr(8).and(0xFFb32).shl(16)).or(h[i].shr(16).and(0xFFb32).shl(8)).or(h[i].shr(24).and(0xFFb32))
	end for
end func
