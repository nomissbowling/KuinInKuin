; File Sample (C)Kuina-chan

const fileName: []char :: "test.txt"
const fileName2: []char :: "test2.txt"

func main()
	var wndMain: wnd@Wnd :: wnd@makeWnd(null, %normal, 1024, 768, "File Sample")
	var edit: wnd@EditMulti :: wnd@makeEditMulti(wndMain, 12, 12, 1000, 744, %scale, %scale)
	do edit.readonly(true)
	try
		do save() {ファイルに保存}
		do edit.setText(load()) {ファイルから読み込み}
		if(wnd@msgBox(wndMain, "生成したファイルを削除しますか？", "File Sample", %info, %yesNo) = %yes)
			; ファイルの削除
			do file@delFile(@fileName)
			do file@delFile(@fileName2)
		end if
	catch
		; ファイルの読み書きに失敗
		do edit.setText("An error occurred.")
	end try
	while(wnd@act())
	end while
	
	func save()
		; "ABCDE,1234,3.14159"というデータをファイルに書き込む
		var writer: file@Writer :: file@makeWriter(@fileName, false) {ファイルを書き込みモードで開く}
		do writer.writeStr("ABCDE") {文字列を書き込み}
		do writer.writeChar(',') {文字を書き込み}
		do writer.writeInt(1234) {整数を書き込み}
		do writer.writeChar(',')
		do writer.writeFloat(3.14159) {小数を書き込み}
		do writer.fin() {ファイルを閉じる}
		
		; "Hello"というデータを暗号化して書き込む
		do writer :: file@makeWriter(@fileName2, false)
		var data: []char :: "Hello" {データを用意}
		var encryptedData: []bit8 :: lib@encrypt(data $> []bit8, @getKey()) {暗号化}
		do writer.write(encryptedData) {書き込み}
		do writer.fin()
	end func
	
	func load(): []char
		var str: []char :: ""
		
		; ファイルをカンマ区切りで読み込む
		var reader: file@Reader :: file@makeReader(@fileName) {ファイルを読み込みモードで開く}
		do reader.delimiter(['\n', ',']) {区切り文字を指定}
		while(!reader.term()) {ファイル終端までループ}
			do str :~ reader.readStr() ~ "\n" {区切った文字列を読み込み}
		end while
		do reader.fin()
		
		; 暗号化されたファイルを読み込んで復号する
		do reader :: file@makeReader(@fileName2)
		var encryptedData: []bit8 :: reader.read(reader.fileSize()) {ファイルをすべて読み込む}
		var data: []char :: lib@decrypt(encryptedData, @getKey()) $< []char {復号}
		do str :~ data
		
		ret str
	end func
end func

; 暗号化の鍵を生成する関数
func getKey(): []bit8
	; 鍵は32byteでなければならない
	ret[0x12b8, 0x34b8, 0x56b8, 0x78b8, 0x9Ab8, 0xBCb8, 0xDEb8, 0xF0b8,
	|0x75b8, 0x38b8, 0x9Bb8, 0xC4b8, 0x21b8, 0xA0b8, 0xDFb8, 0xE6b8,
	|0x49b8, 0x2Fb8, 0xB5b8, 0x3Db8, 0x01b8, 0x68b8, 0x7Ab8, 0xCEb8,
	|0xF0b8, 0x52b8, 0xCAb8, 0xE6b8, 0x89b8, 0xD7b8, 0x4Bb8, 0x31b8]
end func
