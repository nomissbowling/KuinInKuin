; Kuinvaders (くいんべーだー) (C)Kuina-chan

; main関数は実行直後に呼ばれ、main関数を抜けるとアプリは終了する。
func main()
	var wndMain: wnd@Wnd :: wnd@makeWnd(null, %aspect, 1600, 900, "Kuinvaders") {ウインドウの生成}
	var drawMain: wnd@Draw :: wnd@makeDraw(wndMain, 0, 0, 1600, 900, %scale, %scale, false) {ドローコントロールの生成}
	; wnd@actはウインドウ操作を処理する関数で、定期的に呼ばないとウインドウが操作できなくなる。またウインドウを閉じたらfalseを返すので、無限ループを抜けて終了するようにする。
	while(wnd@act())
		do @title() {タイトル画面の呼び出し}
		do @game() {ゲーム画面の呼び出し}
	end while
end func

; タイトル画面。
func title()
	var texTitle: draw@Tex :: draw@makeTex("res/title.jpg") {タイトル画像}
	while(wnd@act() & input@pad(0, %a) <> 1) {Aボタンが押されるまでループ}
		do texTitle.draw(0.0, 0.0, 0.0, 0.0, 1600.0, 900.0, draw@white) {タイトル描画}
		do draw@render(60) {画面更新および60FPSに調整。これが再度呼ばれるまでの間を1フレームと言う}
	end while
end func

; ゲーム画面。
func game()
	var texBack: draw@Tex :: draw@makeTex("res/back.jpg") {背景画像}
	var texGame: draw@Tex :: draw@makeTex("res/game.png") {ゲームで使う画像}
	var stage: int :: 1 {現在のステージ}
	class Beam() {弾クラス}
		+var x: float {座標X}
		+var y: float {座標Y}
	end class
	; ステージごとのループ。
	while loopStage(wnd@act())
		var playerX: float :: 800.0 {自機座標X}
		var playerY: float :: 800.0 {自機座標Y}
		var beams: list<Beam> :: #list<Beam> {自機の弾のリスト}
		var enemies: []int :: #[5 * 6]int {敵を5行6列で作成。値は体力}
		do enemies.fill(1) {敵の体力に1を代入}
		var enemyX: float :: 200.0 / 2.0 {敵群の座標X}
		var enemyY: float :: 100.0 {敵群の座標Y}
		var enemyVeloX: float :: 1.0 + stage $ float + 30.0 / (5.0 * 6.0) {敵群の速度X}
		var enemyTargetY: float :: 0.0 {敵群のY方向の目的座標(下向きに移動するときに使用)}
		var enemyLeft: int :: 0 {生きている敵の左端。移動を折り返す判定に使用}
		var enemyRight: int :: 5 {生きている敵の右端。移動を折り返す判定に使用}
		var enemyBottom: int :: 4 {生きている敵の下端。ラインを超える判定に使用}
		var enemyNum: int :: 5 * 6 {生きている敵の数}
		var enemyBeams: list<Beam> :: #list<Beam> {敵の弾のリスト}
		var gameover: int :: 0 {ゲームオーバーフラグ。0=ゲーム中、1=ステージクリア、2=死亡}
		; フレームごとのループ。
		while(wnd@act())
			; 背景描画。
			do texBack.draw(0.0, 0.0, 0.0, 0.0, 1600.0, 900.0, draw@white)
			; 自機移動。
			if(input@pad(0, %left) > 0) {左ボタン押し続け}
				do playerX :- 12.0 {左に移動}
			end if
			if(input@pad(0, %right) > 0) {右ボタン押し続け}
				do playerX :+ 12.0 {右に移動}
			end if
			if(input@pad(0, %up) > 0) {上ボタン押し続け}
				do playerY :- 12.0 {上に移動}
			end if
			if(input@pad(0, %down) > 0) {下ボタン押し続け}
				do playerY :+ 12.0 {下に移動}
			end if
			; 自機が移動可能な範囲を超えないようにクランプする。
			do playerX :: playerX.clamp(140.0 / 2.0, 1600.0 - 140.0 / 2.0)
			do playerY :: playerY.clamp(700.0, 900.0)
			; 自機の弾発射およびゲームオーバー時のボタン処理。
			if(input@pad(0, %a) = 1)
				if(gameover = 1)
					do stage :+ 1
					skip loopStage {ステージクリアにつき次のステージへ}
				elif(gameover = 2)
					break loopStage {死亡につきタイトル画面へ}
				end if
				var beam: Beam :: #Beam
				do beam.x :: playerX
				do beam.y :: playerY - 220.0 / 2.0
				do beams.add(beam) {リストに弾を追加}
			end if
			; 自機描画。Kuin@Cnt関数は1フレームごとに1ずつ増える値を返す。
			if(gameover <> 2)
				do texGame.draw(playerX - 140.0 / 2.0, playerY - 220.0 / 2.0, (draw@cnt() / 10 % 3) $ float * 140.0, 0.0, 140.0, 220.0, draw@white)
			end if
			; 敵全体の移動。
			if(gameover = 0)
				if(enemyTargetY <> 0.0)
					do enemyY :+ 8.0 {画面端で下向きに移動する}
					if(enemyY >= enemyTargetY)
						do enemyTargetY :: 0.0 {目的座標まで到達したら目的座標をリセット}
					end if
					if(enemyY + enemyBottom $ float * 45.0 > 700.0)
						do gameover :: 2 {敵が下ラインを超えたら死亡}
					end if
				else
					do enemyX :+ enemyVeloX {左右への移動}
					if(enemyX <= 200.0 / 2.0 - enemyLeft $ float * 100.0) {左端に到達}
						do enemyX :: 200.0 / 2.0 - enemyLeft $ float * 100.0
						do enemyVeloX :: 2.0 + stage $ float + 30.0 / enemyNum $ float {残り敵数に応じた速度で右向きに折り返す}
						do enemyTargetY :: enemyY + 60.0 {下向きに移動する}
					end if
					if(enemyX >= 1600.0 - 200.0 / 2.0 - enemyRight $ float * 100.0)
						do enemyX :: 1600.0 - 200.0 / 2.0 - enemyRight $ float * 100.0
						do enemyVeloX :: -(2.0 + stage $ float + 30.0 / enemyNum $ float) {残り敵数に応じた速度で左向きに折り返す}
						do enemyTargetY :: enemyY + 60.0 {下向きに移動する}
					end if
				end if
			end if
			; 敵処理および描画。
			for i(0, 4)
				for j(0, 5)
					if(enemies[i * 6 + j] = 0)
						skip j {敵が消えた箇所はスキップ}
					end if
					if(lib@rnd(0, 60 * enemyNum / stage.clampMax(30)) = 0) {一定確率で弾を発射する}
						var beam: Beam :: #Beam
						do beam.x :: enemyX + j $ float * 100.0
						do beam.y :: enemyY + i $ float * 45.0
						do enemyBeams.add(beam)
					end if
					do texGame.draw(enemyX - 200.0 / 2.0 + j $ float * 100.0, enemyY - 120.0 / 2.0 + i $ float * 45.0, (draw@cnt() / 10 % 3) $ float * 200.0, 220.0, 200.0, 120.0, draw@white)
				end for
			end for
			; 自機の弾移動および描画。
			do beams.head() {beamsリストを先頭から順に走査}
			while loopBeams(!beams.term())
				var beam: Beam :: beams.get()
				do beam.y :- 20.0 {上方向に移動}
				if(beam.y < -90.0 / 2.0)
					do beams.del() {画面外に出たら削除}
					skip loopBeams {要素を.del()したときは.next()をしなくても次の要素を指している}
				end if
				; 敵との衝突判定
				for i(0, 4)
					for j(0, 5)
						if(enemies[i * 6 + j] > 0 & lib@dist(enemyX + j $ float * 100.0, enemyY + i $ float * 45.0, beam.x, beam.y) <= 120.0 / 2.0 + 90.0 / 2.0) {距離が半径の合計以下なら衝突}
							do enemies[i * 6 + j] :- 1 {敵のライフを減少}
							if(enemies[i * 6 + j] = 0)
								do enemyNum :- 1 {敵のライフが0なら敵の合計数を減らす}
							end if
							do beams.del() {自機の弾も消滅させる}
							skip loopBeams
						end if
					end for
				end for
				do texGame.draw(beam.x - 90.0 / 2.0, beam.y - 90.0 / 2.0, 420.0, 0.0, 90.0, 90.0, draw@white)
				do beams.next()
			end while
			if(enemyNum = 0) {敵の数が0ならステージクリア}
				do gameover :: 1
			else {敵が生きているなら各種敵座標の更新}
				while loopEnemyLeft(true)
					for i(0, 4)
						if(enemies[i * 6 + enemyLeft] > 0)
							break loopEnemyLeft {左端に敵が存在している}
						end if
					end for
					do enemyLeft :+ 1 {敵の左端が全滅したなら、左端座標を更新}
				end while
				while loopEnemyRight(true)
					for i(0, 4)
						if(enemies[i * 6 + enemyRight] > 0)
							break loopEnemyRight {右端に敵が存在している}
						end if
					end for
					do enemyRight :- 1 {敵の右端が全滅したなら、右端座標を更新}
				end while
				while loopEnemyBottom(true)
					for i(0, 5)
						if(enemies[enemyBottom * 6 + i] > 0)
							break loopEnemyBottom {下端に敵が存在している}
						end if
					end for
					do enemyBottom :- 1 {敵の下端が全滅したなら、下端座標を更新}
				end while
			end if
			; 敵の弾移動および描画。
			do enemyBeams.head()
			while loopEnemyBeams(!enemyBeams.term())
				var beam: Beam :: enemyBeams.get()
				do beam.y :+ 10.0
				if(gameover = 0 & lib@dist(beam.x, beam.y, playerX, playerY) <= 70.0 / 2.0 + 140.0 / 2.0)
					do gameover :: 2 {敵の弾に当たったら即ゲームオーバー}
				end if
				if(beam.y > 900.0 + 100.0 / 2.0)
					do enemyBeams.del() {画面外に出たら削除}
					skip loopEnemyBeams
				end if
				do texGame.draw(beam.x - 70.0 / 2.0, beam.y - 100.0 / 2.0, 420.0, 90.0, 70.0, 100.0, draw@white)
				do enemyBeams.next()
			end while
			do draw@render(60)
		end while
	end while
end func
