; Collision and Particles Sample (C)Kuina-chan

func main()
	class Item(game@Rect)
		+var weight: float
	end class
	
	const itemNum: int :: 15
	var wndMain: wnd@Wnd :: wnd@makeWnd(null, %aspect, 1600, 900, "Collision and Particles Sample") {ウインドウの生成}
	var drawMain: wnd@Draw :: wnd@makeDraw(wndMain, 0, 0, 1600, 900, %scale, %scale, false) {ドローコントロールの生成}
	var particle: draw@Particle :: draw@makeParticle()
	do particle.lifespan :: 30
	do particle.color2 :: 0x00FFFFFF
	var texParticle: draw@Tex :: draw@makeTex("res/tex_particle.png")
	var rects: []Item :: #[itemNum]Item
	for i(0, itemNum - 1)
		do rects[i] :: #Item
	end for
	do rects[0].x :: 0.0
	do rects[0].y :: 450.0
	do rects[0].width :: 50.0
	do rects[0].height :: 900.0
	do rects[1].x :: 800.0
	do rects[1].y :: 0.0
	do rects[1].width :: 1600.0
	do rects[1].height :: 50.0
	do rects[2].x :: 1600.0
	do rects[2].y :: 450.0
	do rects[2].width :: 50.0
	do rects[2].height :: 900.0
	do rects[3].x :: 800.0
	do rects[3].y :: 900.0
	do rects[3].width :: 1600.0
	do rects[3].height :: 50.0
	for i(0, 3)
		do rects[i].weight :: inf
	end for
	for i(4, itemNum - 1)
		do rects[i].x :: lib@rndFloat(100.0, 1500.0)
		do rects[i].y :: lib@rndFloat(100.0, 800.0)
		do rects[i].width :: 80.0
		do rects[i].height :: 80.0
		do rects[i].veloX :: lib@rndFloat(-10.0, 10.0)
		do rects[i].veloY :: lib@rndFloat(-10.0, 10.0)
		do rects[i].weight :: 1.0
	end for
	
	do draw@clearColor(0xFF333333) {背景色の設定}
	while(wnd@act())
		do draw@blend(%add)
		do particle.draw2d(texParticle)
		do draw@blend(%alpha)
		for i(0, itemNum - 1)
			do rects[i].move(0.0)
		end for
		for i(0, itemNum - 1)
			for j(0, i - 1)
				if(game@hitRectRect(rects[i], rects[j], rects[i].weight, rects[j].weight, 1.0, 0.0) <> %none)
					for k(0, 19)
						do particle.emit(rects[i].x, rects[i].y, 0.0, lib@rndFloat(-3.0, 3.0), lib@rndFloat(-3.0, 3.0), 0.0, 150.0, 0.5, 0.0, lib@rndFloat(-lib@pi / 30.0, lib@pi / 30.0))
					end for
				end if
			end for
		end for
		for i(0, itemNum - 1)
			do rects[i].update()
			do draw@rect(rects[i].x - rects[i].width / 2.0, rects[i].y - rects[i].height / 2.0, rects[i].width, rects[i].height, 0xFF9999FF)
		end for
		do draw@render(60)
	end while
end func
