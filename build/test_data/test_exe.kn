var s: []char :: "abc" ~ "def"

func dump(ns: []bit8)
	var s: []char :: ""
	for i(0, ^ns - 1)
		do s :~ " " ~ ns[i].toStr()
	end for
	do cui@print(s ~ "\n")
end func

; Single line comment #1.
; Single line comment #2.

func main()
	do @test19()
end func

func test19()
	block
		var n: int :: 0
		for i(0, 100)
			if(math@prime(i))
				do n :+ 1
			end if
		end for
		do cui@print(n.toStr() ~ "\n")
	end block

	block
		do cui@print(math@modPow(4, 13, 497).toStr() ~ "\n")
		do cui@print(math@modMul(4, 7, 5).toStr() ~ "\n")
		do cui@print(math@gcd(40, -15).toStr() ~ "\n")
		do cui@print(math@lcm(40, -15).toStr() ~ "\n")
		do cui@print("\{(5).sign()}, \{(-5).sign()}, \{(0).sign()}\n")
		do cui@print("\{(1.2).sign()}, \{(-1.2).sign()}, \{(0.0).sign()}\n")
	end block

	block
		var n: []int :: math@primeFactors(8051)
		for i(0, ^n - 1)
			do cui@print(n[i].toStr() ~ "\n")
		end for
	end block

	block
		var d: dict<int, int> :: #dict<int, int>
		var a: []int :: lib@shuffle(100)
		var b: []int :: lib@shuffle(^a)
		for i(0, ^a - 1)
			do d.add(a[i], i)
		end for
		do cui@print((^d).toStr() ~ "\n")
		for i(0, ^b - 1)
			do d.del(b[i])
		end for
		do cui@print((^d).toStr() ~ "\n")
	end block

	block
		var d: dict<[]char, []char> :: #dict<[]char, []char>
		var a: []int :: lib@shuffle(100)
		var b: []int :: lib@shuffle(^a)
		for i(0, ^a - 1)
			do d.add(a[i].toStr(), i.toStr())
		end for
		do cui@print((^d).toStr() ~ "\n")
		for i(0, ^b / 2 - 1)
			do d.del(b[i].toStr())
			do d.del(b[i].toStr())
		end for
		do cui@print((^d).toStr() ~ "\n")
	end block
end func
